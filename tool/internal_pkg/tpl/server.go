// Copyright 2022 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tpl

// ServerTpl is the template for generating server.go.
var ServerTpl string = `// Code generated by Kitex {{.Version}}. DO NOT EDIT.
package {{ToLower .ServiceName}}

import (
	{{- range $path, $aliases := .Imports}}
		{{- if not $aliases}}
			"{{$path}}"
		{{- else}}
			{{- range $alias, $is := $aliases}}
				{{$alias}} "{{$path}}"
			{{- end}}
		{{- end}}
	{{- end}}
)

{{- if .StreamX}}
type {{.ServiceName}} interface {
{{- range .AllMethods}}
{{- if (or .ClientStreaming .ServerStreaming)}}
	{{.Name}}(ctx context.Context {{if not .ClientStreaming}}{{range .Args}}, {{.RawName}} {{.Type}}{{end}}{{end}}, stream {{.ServiceName}}_{{.RawName}}Server) (err error)
{{- else}}
	{{.Name}}(ctx context.Context {{range .Args}}, {{.RawName}} {{.Type}}{{end}}) ({{if not .Void}}r {{.Resp.Type}}, {{end}}err error)
{{- end}}
{{- end}}
}

{{range .Methods}}
{{- if or .ClientStreaming .ServerStreaming}}
{{$arg := index .Args 0}}
{{- if and .ClientStreaming .ServerStreaming}}
type {{.ServiceName}}_{{.Name}}Server streaming.BidiStreamingServer[{{NotPtr $arg.Type}},{{NotPtr .Resp.Type}}]
{{- else if .ClientStreaming}}
type {{.ServiceName}}_{{.Name}}Server streaming.ClientStreamingServer[{{NotPtr $arg.Type}},{{NotPtr .Resp.Type}}]
{{- else}}
type {{.ServiceName}}_{{.Name}}Server streaming.ServerStreamingServer[{{NotPtr .Resp.Type}}]
{{- end}}
{{- end}}
{{end}}
{{- end}}

// NewServer creates a server.Server with the given handler and options.
{{- if .StreamX}}
func NewServer(handler {{.ServiceName}}, opts ...server.Option) server.Server {
{{- else}}
func NewServer(handler {{call .ServiceTypeName}}, opts ...server.Option) server.Server {
{{- end}}
    var options []server.Option
    {{template "@server.go-NewServer-option" .}}
    options = append(options, opts...)
	{{- if eq $.Codec "thrift"}}
	options = append(options, server.WithCompatibleMiddlewareForUnary())
	{{- end}}

    svr := server.NewServer(options...)
    if err := svr.RegisterService(serviceInfo(), handler); err != nil {
            panic(err)
    }
	{{- if .FrugalPretouch}}
	pretouch()
	{{- end}}{{/* if .FrugalPretouch */}}
    return svr
}
{{template "@server.go-EOF" .}}

{{- if .StreamX}}
func RegisterService(svr server.Server, handler {{.ServiceName}}, opts ...server.RegisterOption) error {
{{- else}}
func RegisterService(svr server.Server, handler {{call .ServiceTypeName}}, opts ...server.RegisterOption) error {
{{- end}}
	return svr.RegisterService(serviceInfo(), handler, opts...)
}
`
