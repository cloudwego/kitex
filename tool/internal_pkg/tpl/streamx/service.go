/*
 * Copyright 2024 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package streamx

var ServiceTpl = `// Code generated by Kitex {{.Version}}. DO NOT EDIT.
package {{ToLower .ServiceName}}

import (
	{{- range $path, $aliases := .Imports}}
		{{- if not $aliases}}
			"{{$path}}"
		{{- else}}
			{{- range $alias, $is := $aliases}}
				{{$alias}} "{{$path}}"
			{{- end}}
		{{- end}}
	{{- end}}
)
{{- $protocol := .Protocol | getStreamxRef}}

var svcInfo = &serviceinfo.ServiceInfo{
    ServiceName: "{{.RawServiceName}}",
    Methods: map[string]serviceinfo.MethodInfo{
        {{- range .AllMethods}}
        {{- $unary := and (not .ServerStreaming) (not .ClientStreaming)}}
        {{- $clientSide := and .ClientStreaming (not .ServerStreaming)}}
        {{- $serverSide := and (not .ClientStreaming) .ServerStreaming}}
        {{- $bidiSide := and .ClientStreaming .ServerStreaming}}
        {{- $arg := index .Args 0}}
        {{- $mode := ""}}
            {{- if $bidiSide -}} {{- $mode = "serviceinfo.StreamingBidirectional" }}
            {{- else if $serverSide -}} {{- $mode = "serviceinfo.StreamingServer" }}
			{{- else if $clientSide -}} {{- $mode = "serviceinfo.StreamingClient" }}
			{{- else if $unary -}} {{- $mode = "serviceinfo.StreamingUnary" }}
            {{- end}}
		"{{.RawName}}": serviceinfo.NewMethodInfo(
			func(ctx context.Context, handler, reqArgs, resArgs interface{}) error {
				return streamxserver.InvokeStream[{{NotPtr $arg.Type}}, {{NotPtr .Resp.Type}}](
					ctx, {{$mode}}, handler.(streamx.StreamHandler), reqArgs.(streamx.StreamReqArgs), resArgs.(streamx.StreamResArgs))
			},
			nil,
			nil,
			false,
			serviceinfo.WithStreamingMode({{$mode}}),
		),
        {{- end}}
    },
    Extra: map[string]interface{}{
        "streaming": true,
        "streamx": true,
    },
}

`
