package stream_v2

var ServerTpl = `// Code generated by Kitex {{.Version}}. DO NOT EDIT.
package {{ToLower .ServiceName}}

import (
	{{- range $path, $aliases := .Imports}}
		{{- if not $aliases}}
			"{{$path}}"
		{{- else}}
			{{- range $alias, $is := $aliases}}
				{{$alias}} "{{$path}}"
			{{- end}}
		{{- end}}
	{{- end}}
)
{{- $protocol := .Protocol | ToString | ToLower}}

type ClientStreamingServer[Req, Res any] streamx.ClientStreamingServer[{{$protocol}}.Header, {{$protocol}}.Trailer, Req, Res]
type ServerStreamingServer[Res any] streamx.ServerStreamingServer[{{$protocol}}.Header, {{$protocol}}.Trailer, Res]
type BidiStreamingServer[Req, Res any] streamx.BidiStreamingServer[{{$protocol}}.Header, {{$protocol}}.Trailer, Req, Res]

type ServerInterface interface {
{{- range .AllMethods}}
{{- $unary := and (not .ServerStreaming) (not .ClientStreaming)}}
{{- $clientSide := and .ClientStreaming (not .ServerStreaming)}}
{{- $serverSide := and (not .ClientStreaming) .ServerStreaming}}
{{- $bidiSide := and .ClientStreaming .ServerStreaming}}
{{- $arg := index .Args 0}}
    {{.Name}}{{- if $unary}}(ctx context.Context, req {{$arg.Type}}) ({{.Resp.Type}}, error)
             {{- else if $clientSide}}(ctx context.Context, stream ClientStreamingServer[{{NotPtr $arg.Type}}, {{NotPtr .Resp.Type}}]) ({{.Resp.Type}}, error)
             {{- else if $serverSide}}(ctx context.Context, req {{$arg.Type}}, stream ServerStreamingServer[{{NotPtr .Resp.Type}}]) error
             {{- else if $bidiSide}}(ctx context.Context, stream BidiStreamingServer[{{NotPtr $arg.Type}}, {{NotPtr .Resp.Type}}]) error
             {{- end}}
{{- end}}
}

func RegisterService(svr server.Server, handler ServerInterface, opts ...server.RegisterOption) error {
	return svr.RegisterService(svcInfo, handler, opts...)
}
`
