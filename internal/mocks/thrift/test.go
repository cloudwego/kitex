// Code generated by thriftgo (0.0.26-alpha.1). DO NOT EDIT.

package thrift

import (
	"context"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

type MockReq struct {
	Msg     string            `thrift:"Msg,1" json:"Msg"`
	StrMap  map[string]string `thrift:"strMap,2" json:"strMap"`
	StrList []string          `thrift:"strList,3" json:"strList"`
}

func NewMockReq() *MockReq {
	return &MockReq{}
}

func (p *MockReq) GetMsg() string {
	return p.Msg
}

func (p *MockReq) SetMsg(val string) {
	p.Msg = val
}

func (p *MockReq) GetStrMap() map[string]string {
	return p.StrMap
}

func (p *MockReq) SetStrMap(val map[string]string) {
	p.StrMap = val
}

func (p *MockReq) GetStrList() []string {
	return p.StrList
}

func (p *MockReq) SetStrList(val []string) {
	p.StrList = val
}

func (p *MockReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MockReq) ReadField1(iprot thrift.TProtocol) (err error) {
	var _val1 string
	if _val1, err = iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	}

	p.Msg = _val1

	return nil
}

func (p *MockReq) ReadField2(iprot thrift.TProtocol) (err error) {
	var _val1 map[string]string
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	_val1 = make(map[string]string, size)
	for i := 0; i < size; i++ {

		var _key2 string
		if _key2, err = iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 2: ", err)
		}

		var _val3 string
		if _val3, err = iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 2: ", err)
		}
		_val1[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}

	p.StrMap = _val1

	return nil
}

func (p *MockReq) ReadField3(iprot thrift.TProtocol) (err error) {
	var _val1 []string
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	_val1 = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _val2 string
		if _val2, err = iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 3: ", err)
		}
		_val1 = append(_val1, _val2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}

	p.StrList = _val1

	return nil
}

func (p *MockReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MockReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MockReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Msg: ", p), err)
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Msg: ", p), err)
	}
	return err
}

func (p *MockReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("strMap", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:strMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StrMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.StrMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:strMap: ", p), err)
	}
	return err
}

func (p *MockReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("strList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:strList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StrList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StrList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:strList: ", p), err)
	}
	return err
}

type Mock interface {
	Test(ctx context.Context, req *MockReq) (r string, err error)
}

type MockClient struct {
	c thrift.TClient
}

func NewMockClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MockClient {
	return &MockClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMockClientProtocol(t thrift.TTransport, iprot, oprot thrift.TProtocol) *MockClient {
	return &MockClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMockClient(c thrift.TClient) *MockClient {
	return &MockClient{
		c: c,
	}
}

func (p *MockClient) Client_() thrift.TClient {
	return p.c
}

func (p *MockClient) Test(ctx context.Context, req *MockReq) (r string, err error) {
	var _args MockTestArgs
	_args.Req = req
	var _result MockTestResult
	if err = p.Client_().Call(ctx, "Test", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MockProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Mock
}

func (p *MockProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MockProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MockProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMockProcessor(handler Mock) *MockProcessor {
	self := &MockProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Test", &mockProcessorTest{handler: handler})
	return self
}

func (p *MockProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type mockProcessorTest struct {
	handler Mock
}

func (p *mockProcessorTest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MockTestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Test", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MockTestResult{}
	var retval string
	if retval, err2 = p.handler.Test(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Test: "+err2.Error())
		oprot.WriteMessageBegin("Test", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Test", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MockTestArgs struct {
	Req *MockReq `thrift:"req,1" json:"req"`
}

func NewMockTestArgs() *MockTestArgs {
	return &MockTestArgs{}
}

var MockTestArgs_Req_DEFAULT *MockReq

func (p *MockTestArgs) GetReq() *MockReq {
	if !p.IsSetReq() {
		return MockTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MockTestArgs) SetReq(val *MockReq) {
	p.Req = val
}

func (p *MockTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MockTestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MockTestArgs) ReadField1(iprot thrift.TProtocol) (err error) {
	var _val1 *MockReq
	_val1 = NewMockReq()
	if err := _val1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val1), err)
	}

	p.Req = _val1

	return nil
}

func (p *MockTestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Test_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MockTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *MockTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MockTestResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewMockTestResult() *MockTestResult {
	return &MockTestResult{}
}

var MockTestResult_Success_DEFAULT string

func (p *MockTestResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return MockTestResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *MockTestResult) SetSuccess(val *string) {
	p.Success = val
}

func (p *MockTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MockTestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MockTestResult) ReadField0(iprot thrift.TProtocol) (err error) {
	var _val1 string
	if _val1, err = iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	}

	p.Success = &_val1

	return nil
}

func (p *MockTestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Test_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MockTestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}

		if err := oprot.WriteString(*p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MockTestResult) GetResult() interface{} {
	return p.Success
}
