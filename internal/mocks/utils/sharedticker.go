/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/utils/sharedticker.go

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTickerTask is a mock of TickerTask interface.
type MockTickerTask struct {
	ctrl     *gomock.Controller
	recorder *MockTickerTaskMockRecorder
}

// MockTickerTaskMockRecorder is the mock recorder for MockTickerTask.
type MockTickerTaskMockRecorder struct {
	mock *MockTickerTask
}

// NewMockTickerTask creates a new mock instance.
func NewMockTickerTask(ctrl *gomock.Controller) *MockTickerTask {
	mock := &MockTickerTask{ctrl: ctrl}
	mock.recorder = &MockTickerTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickerTask) EXPECT() *MockTickerTaskMockRecorder {
	return m.recorder
}

// Tick mocks base method.
func (m *MockTickerTask) Tick() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Tick")
}

// Tick indicates an expected call of Tick.
func (mr *MockTickerTaskMockRecorder) Tick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockTickerTask)(nil).Tick))
}
