/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/


// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/utils/sharedticker.go

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRefreshTask is a mock of RefreshTask interface.
type MockRefreshTask struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTaskMockRecorder
}

// MockRefreshTaskMockRecorder is the mock recorder for MockRefreshTask.
type MockRefreshTaskMockRecorder struct {
	mock *MockRefreshTask
}

// NewMockRefreshTask creates a new mock instance.
func NewMockRefreshTask(ctrl *gomock.Controller) *MockRefreshTask {
	mock := &MockRefreshTask{ctrl: ctrl}
	mock.recorder = &MockRefreshTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTask) EXPECT() *MockRefreshTaskMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockRefreshTask) Refresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh")
}

// Refresh indicates an expected call of Refresh.
func (mr *MockRefreshTaskMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockRefreshTask)(nil).Refresh))
}
