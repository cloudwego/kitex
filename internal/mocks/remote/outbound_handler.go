/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudwego/kitex/pkg/remote (interfaces: OutboundHandler)

// Package remote is a generated GoMock package.
package remote

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	remote "github.com/cloudwego/kitex/pkg/remote"
)

// MockOutboundHandler is a mock of OutboundHandler interface.
type MockOutboundHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutboundHandlerMockRecorder
}

// MockOutboundHandlerMockRecorder is the mock recorder for MockOutboundHandler.
type MockOutboundHandlerMockRecorder struct {
	mock *MockOutboundHandler
}

// NewMockOutboundHandler creates a new mock instance.
func NewMockOutboundHandler(ctrl *gomock.Controller) *MockOutboundHandler {
	mock := &MockOutboundHandler{ctrl: ctrl}
	mock.recorder = &MockOutboundHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboundHandler) EXPECT() *MockOutboundHandlerMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockOutboundHandler) Write(arg0 context.Context, arg1 net.Conn, arg2 remote.Message) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockOutboundHandlerMockRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockOutboundHandler)(nil).Write), arg0, arg1, arg2)
}
