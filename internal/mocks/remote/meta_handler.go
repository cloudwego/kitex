/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudwego/kitex/pkg/remote (interfaces: MetaHandler)

// Package remote is a generated GoMock package.
package remote

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	remote "github.com/cloudwego/kitex/pkg/remote"
)

// MockMetaHandler is a mock of MetaHandler interface.
type MockMetaHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMetaHandlerMockRecorder
}

// MockMetaHandlerMockRecorder is the mock recorder for MockMetaHandler.
type MockMetaHandlerMockRecorder struct {
	mock *MockMetaHandler
}

// NewMockMetaHandler creates a new mock instance.
func NewMockMetaHandler(ctrl *gomock.Controller) *MockMetaHandler {
	mock := &MockMetaHandler{ctrl: ctrl}
	mock.recorder = &MockMetaHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaHandler) EXPECT() *MockMetaHandlerMockRecorder {
	return m.recorder
}

// ReadMeta mocks base method.
func (m *MockMetaHandler) ReadMeta(arg0 context.Context, arg1 remote.Message) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMeta", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMeta indicates an expected call of ReadMeta.
func (mr *MockMetaHandlerMockRecorder) ReadMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMeta", reflect.TypeOf((*MockMetaHandler)(nil).ReadMeta), arg0, arg1)
}

// WriteMeta mocks base method.
func (m *MockMetaHandler) WriteMeta(arg0 context.Context, arg1 remote.Message) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMeta", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMeta indicates an expected call of WriteMeta.
func (mr *MockMetaHandlerMockRecorder) WriteMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMeta", reflect.TypeOf((*MockMetaHandler)(nil).WriteMeta), arg0, arg1)
}
