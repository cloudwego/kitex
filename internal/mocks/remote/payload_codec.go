/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/remote/payload_codec.go

// Package remote is a generated GoMock package.
package remote

import (
	context "context"
	reflect "reflect"

	remote "github.com/cloudwego/kitex/pkg/remote"
	gomock "github.com/golang/mock/gomock"
)

// MockPayloadCodec is a mock of PayloadCodec interface.
type MockPayloadCodec struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadCodecMockRecorder
}

// MockPayloadCodecMockRecorder is the mock recorder for MockPayloadCodec.
type MockPayloadCodecMockRecorder struct {
	mock *MockPayloadCodec
}

// NewMockPayloadCodec creates a new mock instance.
func NewMockPayloadCodec(ctrl *gomock.Controller) *MockPayloadCodec {
	mock := &MockPayloadCodec{ctrl: ctrl}
	mock.recorder = &MockPayloadCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadCodec) EXPECT() *MockPayloadCodecMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockPayloadCodec) Marshal(ctx context.Context, message remote.Message, out remote.ByteBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", ctx, message, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Marshal indicates an expected call of Marshal.
func (mr *MockPayloadCodecMockRecorder) Marshal(ctx, message, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockPayloadCodec)(nil).Marshal), ctx, message, out)
}

// Name mocks base method.
func (m *MockPayloadCodec) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPayloadCodecMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPayloadCodec)(nil).Name))
}

// Unmarshal mocks base method.
func (m *MockPayloadCodec) Unmarshal(ctx context.Context, message remote.Message, in remote.ByteBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", ctx, message, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockPayloadCodecMockRecorder) Unmarshal(ctx, message, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockPayloadCodec)(nil).Unmarshal), ctx, message, in)
}
