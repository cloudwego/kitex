/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.9.4. DO NOT EDIT.

package remote

import (
	context "context"

	remote "github.com/cloudwego/kitex/pkg/remote"
	mock "github.com/stretchr/testify/mock"
)

// MetaHandler is an autogenerated mock type for the MetaHandler type
type MetaHandler struct {
	mock.Mock
}

// ReadMeta provides a mock function with given fields: ctx, msg
func (_m *MetaHandler) ReadMeta(ctx context.Context, msg remote.Message) (context.Context, error) {
	ret := _m.Called(ctx, msg)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, remote.Message) context.Context); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, remote.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteMeta provides a mock function with given fields: ctx, msg
func (_m *MetaHandler) WriteMeta(ctx context.Context, msg remote.Message) (context.Context, error) {
	ret := _m.Called(ctx, msg)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, remote.Message) context.Context); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, remote.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
