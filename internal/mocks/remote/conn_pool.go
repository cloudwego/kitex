/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudwego/kitex/pkg/remote (interfaces: ConnPool)

// Package remote is a generated GoMock package.
package remote

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	remote "github.com/cloudwego/kitex/pkg/remote"
)

// MockConnPool is a mock of ConnPool interface.
type MockConnPool struct {
	ctrl     *gomock.Controller
	recorder *MockConnPoolMockRecorder
}

// MockConnPoolMockRecorder is the mock recorder for MockConnPool.
type MockConnPoolMockRecorder struct {
	mock *MockConnPool
}

// NewMockConnPool creates a new mock instance.
func NewMockConnPool(ctrl *gomock.Controller) *MockConnPool {
	mock := &MockConnPool{ctrl: ctrl}
	mock.recorder = &MockConnPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnPool) EXPECT() *MockConnPoolMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnPool) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnPool)(nil).Close))
}

// Discard mocks base method.
func (m *MockConnPool) Discard(arg0 net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Discard indicates an expected call of Discard.
func (mr *MockConnPoolMockRecorder) Discard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockConnPool)(nil).Discard), arg0)
}

// Get mocks base method.
func (m *MockConnPool) Get(arg0 context.Context, arg1, arg2 string, arg3 remote.ConnOption) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConnPoolMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnPool)(nil).Get), arg0, arg1, arg2, arg3)
}

// Put mocks base method.
func (m *MockConnPool) Put(arg0 net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockConnPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockConnPool)(nil).Put), arg0)
}
