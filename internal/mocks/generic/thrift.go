/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/


// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/generic/thrift/thrift.go

// Package generic is a generated GoMock package.
package generic

import (
	context "context"
	reflect "reflect"

	thrift "github.com/apache/thrift/lib/go/thrift"
	thrift0 "github.com/cloudwego/kitex/pkg/generic/thrift"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageReader is a mock of MessageReader interface.
type MockMessageReader struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReaderMockRecorder
}

// MockMessageReaderMockRecorder is the mock recorder for MockMessageReader.
type MockMessageReaderMockRecorder struct {
	mock *MockMessageReader
}

// NewMockMessageReader creates a new mock instance.
func NewMockMessageReader(ctrl *gomock.Controller) *MockMessageReader {
	mock := &MockMessageReader{ctrl: ctrl}
	mock.recorder = &MockMessageReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageReader) EXPECT() *MockMessageReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockMessageReader) Read(ctx context.Context, method string, in thrift.TProtocol) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, method, in)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMessageReaderMockRecorder) Read(ctx, method, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMessageReader)(nil).Read), ctx, method, in)
}

// MockMessageWriter is a mock of MessageWriter interface.
type MockMessageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMessageWriterMockRecorder
}

// MockMessageWriterMockRecorder is the mock recorder for MockMessageWriter.
type MockMessageWriterMockRecorder struct {
	mock *MockMessageWriter
}

// NewMockMessageWriter creates a new mock instance.
func NewMockMessageWriter(ctrl *gomock.Controller) *MockMessageWriter {
	mock := &MockMessageWriter{ctrl: ctrl}
	mock.recorder = &MockMessageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageWriter) EXPECT() *MockMessageWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockMessageWriter) Write(ctx context.Context, out thrift.TProtocol, msg interface{}, requestBase *thrift0.Base) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, out, msg, requestBase)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockMessageWriterMockRecorder) Write(ctx, out, msg, requestBase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMessageWriter)(nil).Write), ctx, out, msg, requestBase)
}
