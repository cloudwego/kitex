/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudwego/kitex/pkg/diagnosis (interfaces: Service)

// Package remote is a generated GoMock package.
package diagnosis

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	diagnosis "github.com/cloudwego/kitex/pkg/diagnosis"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// RegisterProbeFunc mocks base method.
func (m *MockService) RegisterProbeFunc(arg0 diagnosis.ProbeName, arg1 diagnosis.ProbeFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterProbeFunc", arg0, arg1)
}

// RegisterProbeFunc indicates an expected call of RegisterProbeFunc.
func (mr *MockServiceMockRecorder) RegisterProbeFunc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProbeFunc", reflect.TypeOf((*MockService)(nil).RegisterProbeFunc), arg0, arg1)
}
