// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: idl/basic_example.proto

package base

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BasicExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32             int32              `protobuf:"varint,1,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64             int64              `protobuf:"varint,2,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Uint32            uint32             `protobuf:"varint,3,opt,name=Uint32,proto3" json:"Uint32,omitempty"`
	Uint64            uint64             `protobuf:"varint,4,opt,name=Uint64,proto3" json:"Uint64,omitempty"`
	Sint32            int32              `protobuf:"zigzag32,5,opt,name=Sint32,proto3" json:"Sint32,omitempty"`
	Sint64            int64              `protobuf:"zigzag64,6,opt,name=Sint64,proto3" json:"Sint64,omitempty"`
	Sfixed32          int32              `protobuf:"fixed32,7,opt,name=Sfixed32,proto3" json:"Sfixed32,omitempty"`
	Sfixed64          int64              `protobuf:"fixed64,8,opt,name=Sfixed64,proto3" json:"Sfixed64,omitempty"`
	Fixed32           uint32             `protobuf:"fixed32,9,opt,name=Fixed32,proto3" json:"Fixed32,omitempty"`
	Fixed64           uint64             `protobuf:"fixed64,10,opt,name=Fixed64,proto3" json:"Fixed64,omitempty"`
	Float             float32            `protobuf:"fixed32,11,opt,name=Float,proto3" json:"Float,omitempty"`
	Double            float64            `protobuf:"fixed64,12,opt,name=Double,proto3" json:"Double,omitempty"`
	Bool              bool               `protobuf:"varint,13,opt,name=Bool,proto3" json:"Bool,omitempty"`
	Str               string             `protobuf:"bytes,14,opt,name=Str,proto3" json:"Str,omitempty"`
	Bytes             []byte             `protobuf:"bytes,15,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	ListInt32         []int32            `protobuf:"varint,16,rep,packed,name=ListInt32,proto3" json:"ListInt32,omitempty"`
	ListInt64         []int64            `protobuf:"varint,17,rep,packed,name=ListInt64,proto3" json:"ListInt64,omitempty"`
	ListUint32        []uint32           `protobuf:"varint,18,rep,packed,name=ListUint32,proto3" json:"ListUint32,omitempty"`
	ListUint64        []uint64           `protobuf:"varint,19,rep,packed,name=ListUint64,proto3" json:"ListUint64,omitempty"`
	ListSint32        []int32            `protobuf:"zigzag32,20,rep,packed,name=ListSint32,proto3" json:"ListSint32,omitempty"`
	ListSint64        []int64            `protobuf:"zigzag64,21,rep,packed,name=ListSint64,proto3" json:"ListSint64,omitempty"`
	ListSfixed32      []int32            `protobuf:"fixed32,22,rep,packed,name=ListSfixed32,proto3" json:"ListSfixed32,omitempty"`
	ListSfixed64      []int64            `protobuf:"fixed64,23,rep,packed,name=ListSfixed64,proto3" json:"ListSfixed64,omitempty"`
	ListFixed32       []uint32           `protobuf:"fixed32,24,rep,packed,name=ListFixed32,proto3" json:"ListFixed32,omitempty"`
	ListFixed64       []uint64           `protobuf:"fixed64,25,rep,packed,name=ListFixed64,proto3" json:"ListFixed64,omitempty"`
	ListFloat         []float32          `protobuf:"fixed32,26,rep,packed,name=ListFloat,proto3" json:"ListFloat,omitempty"`
	ListDouble        []float64          `protobuf:"fixed64,27,rep,packed,name=ListDouble,proto3" json:"ListDouble,omitempty"`
	ListBool          []bool             `protobuf:"varint,28,rep,packed,name=ListBool,proto3" json:"ListBool,omitempty"`
	ListString        []string           `protobuf:"bytes,29,rep,name=ListString,proto3" json:"ListString,omitempty"`
	ListBytes         [][]byte           `protobuf:"bytes,30,rep,name=ListBytes,proto3" json:"ListBytes,omitempty"`
	MapInt64SINT32    map[int64]int32    `protobuf:"bytes,31,rep,name=MapInt64SINT32,proto3" json:"MapInt64SINT32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt64Sfixed32  map[int64]int32    `protobuf:"bytes,32,rep,name=MapInt64Sfixed32,proto3" json:"MapInt64Sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt64Fixed32   map[int64]uint32   `protobuf:"bytes,33,rep,name=MapInt64Fixed32,proto3" json:"MapInt64Fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt64Uint32    map[int64]uint32   `protobuf:"bytes,34,rep,name=MapInt64Uint32,proto3" json:"MapInt64Uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Double    map[int64]float64  `protobuf:"bytes,35,rep,name=MapInt64Double,proto3" json:"MapInt64Double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt64Bool      map[int64]bool     `protobuf:"bytes,36,rep,name=MapInt64Bool,proto3" json:"MapInt64Bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64String    map[int64]string   `protobuf:"bytes,37,rep,name=MapInt64String,proto3" json:"MapInt64String,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Bytes     map[int64][]byte   `protobuf:"bytes,38,rep,name=MapInt64Bytes,proto3" json:"MapInt64Bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Float     map[int64]float32  `protobuf:"bytes,39,rep,name=MapInt64Float,proto3" json:"MapInt64Float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt64Int32     map[int64]int32    `protobuf:"bytes,40,rep,name=MapInt64Int32,proto3" json:"MapInt64Int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapstringSINT64   map[string]int64   `protobuf:"bytes,41,rep,name=MapstringSINT64,proto3" json:"MapstringSINT64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapstringSfixed64 map[string]int64   `protobuf:"bytes,42,rep,name=MapstringSfixed64,proto3" json:"MapstringSfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapstringFixed64  map[string]uint64  `protobuf:"bytes,43,rep,name=MapstringFixed64,proto3" json:"MapstringFixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapstringUint64   map[string]uint64  `protobuf:"bytes,44,rep,name=MapstringUint64,proto3" json:"MapstringUint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapstringDouble   map[string]float64 `protobuf:"bytes,45,rep,name=MapstringDouble,proto3" json:"MapstringDouble,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapstringBool     map[string]bool    `protobuf:"bytes,46,rep,name=MapstringBool,proto3" json:"MapstringBool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapstringString   map[string]string  `protobuf:"bytes,47,rep,name=MapstringString,proto3" json:"MapstringString,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapstringBytes    map[string][]byte  `protobuf:"bytes,48,rep,name=MapstringBytes,proto3" json:"MapstringBytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapstringFloat    map[string]float32 `protobuf:"bytes,49,rep,name=MapstringFloat,proto3" json:"MapstringFloat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapstringInt64    map[string]int64   `protobuf:"bytes,50,rep,name=MapstringInt64,proto3" json:"MapstringInt64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BasicExample) Reset() {
	*x = BasicExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_basic_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicExample) ProtoMessage() {}

func (x *BasicExample) ProtoReflect() protoreflect.Message {
	mi := &file_idl_basic_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicExample.ProtoReflect.Descriptor instead.
func (*BasicExample) Descriptor() ([]byte, []int) {
	return file_idl_basic_example_proto_rawDescGZIP(), []int{0}
}

func (x *BasicExample) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *BasicExample) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *BasicExample) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *BasicExample) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *BasicExample) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *BasicExample) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *BasicExample) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *BasicExample) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *BasicExample) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *BasicExample) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *BasicExample) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *BasicExample) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *BasicExample) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *BasicExample) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *BasicExample) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *BasicExample) GetListInt32() []int32 {
	if x != nil {
		return x.ListInt32
	}
	return nil
}

func (x *BasicExample) GetListInt64() []int64 {
	if x != nil {
		return x.ListInt64
	}
	return nil
}

func (x *BasicExample) GetListUint32() []uint32 {
	if x != nil {
		return x.ListUint32
	}
	return nil
}

func (x *BasicExample) GetListUint64() []uint64 {
	if x != nil {
		return x.ListUint64
	}
	return nil
}

func (x *BasicExample) GetListSint32() []int32 {
	if x != nil {
		return x.ListSint32
	}
	return nil
}

func (x *BasicExample) GetListSint64() []int64 {
	if x != nil {
		return x.ListSint64
	}
	return nil
}

func (x *BasicExample) GetListSfixed32() []int32 {
	if x != nil {
		return x.ListSfixed32
	}
	return nil
}

func (x *BasicExample) GetListSfixed64() []int64 {
	if x != nil {
		return x.ListSfixed64
	}
	return nil
}

func (x *BasicExample) GetListFixed32() []uint32 {
	if x != nil {
		return x.ListFixed32
	}
	return nil
}

func (x *BasicExample) GetListFixed64() []uint64 {
	if x != nil {
		return x.ListFixed64
	}
	return nil
}

func (x *BasicExample) GetListFloat() []float32 {
	if x != nil {
		return x.ListFloat
	}
	return nil
}

func (x *BasicExample) GetListDouble() []float64 {
	if x != nil {
		return x.ListDouble
	}
	return nil
}

func (x *BasicExample) GetListBool() []bool {
	if x != nil {
		return x.ListBool
	}
	return nil
}

func (x *BasicExample) GetListString() []string {
	if x != nil {
		return x.ListString
	}
	return nil
}

func (x *BasicExample) GetListBytes() [][]byte {
	if x != nil {
		return x.ListBytes
	}
	return nil
}

func (x *BasicExample) GetMapInt64SINT32() map[int64]int32 {
	if x != nil {
		return x.MapInt64SINT32
	}
	return nil
}

func (x *BasicExample) GetMapInt64Sfixed32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Sfixed32
	}
	return nil
}

func (x *BasicExample) GetMapInt64Fixed32() map[int64]uint32 {
	if x != nil {
		return x.MapInt64Fixed32
	}
	return nil
}

func (x *BasicExample) GetMapInt64Uint32() map[int64]uint32 {
	if x != nil {
		return x.MapInt64Uint32
	}
	return nil
}

func (x *BasicExample) GetMapInt64Double() map[int64]float64 {
	if x != nil {
		return x.MapInt64Double
	}
	return nil
}

func (x *BasicExample) GetMapInt64Bool() map[int64]bool {
	if x != nil {
		return x.MapInt64Bool
	}
	return nil
}

func (x *BasicExample) GetMapInt64String() map[int64]string {
	if x != nil {
		return x.MapInt64String
	}
	return nil
}

func (x *BasicExample) GetMapInt64Bytes() map[int64][]byte {
	if x != nil {
		return x.MapInt64Bytes
	}
	return nil
}

func (x *BasicExample) GetMapInt64Float() map[int64]float32 {
	if x != nil {
		return x.MapInt64Float
	}
	return nil
}

func (x *BasicExample) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *BasicExample) GetMapstringSINT64() map[string]int64 {
	if x != nil {
		return x.MapstringSINT64
	}
	return nil
}

func (x *BasicExample) GetMapstringSfixed64() map[string]int64 {
	if x != nil {
		return x.MapstringSfixed64
	}
	return nil
}

func (x *BasicExample) GetMapstringFixed64() map[string]uint64 {
	if x != nil {
		return x.MapstringFixed64
	}
	return nil
}

func (x *BasicExample) GetMapstringUint64() map[string]uint64 {
	if x != nil {
		return x.MapstringUint64
	}
	return nil
}

func (x *BasicExample) GetMapstringDouble() map[string]float64 {
	if x != nil {
		return x.MapstringDouble
	}
	return nil
}

func (x *BasicExample) GetMapstringBool() map[string]bool {
	if x != nil {
		return x.MapstringBool
	}
	return nil
}

func (x *BasicExample) GetMapstringString() map[string]string {
	if x != nil {
		return x.MapstringString
	}
	return nil
}

func (x *BasicExample) GetMapstringBytes() map[string][]byte {
	if x != nil {
		return x.MapstringBytes
	}
	return nil
}

func (x *BasicExample) GetMapstringFloat() map[string]float32 {
	if x != nil {
		return x.MapstringFloat
	}
	return nil
}

func (x *BasicExample) GetMapstringInt64() map[string]int64 {
	if x != nil {
		return x.MapstringInt64
	}
	return nil
}

var File_idl_basic_example_proto protoreflect.FileDescriptor

var file_idl_basic_example_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x64, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x62, 0x33, 0x22, 0xd0,
	0x1d, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x74, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x11, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0f, 0x52, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x17, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x49, 0x4e,
	0x54, 0x33, 0x32, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x33, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x12, 0x53, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x33,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62,
	0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4d,
	0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x33,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x12, 0x56, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x53, 0x0a, 0x10, 0x4d,
	0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x33, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62,
	0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62,
	0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x33, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x33,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x33, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61,
	0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0x45, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x65, 0x67, 0x6f,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_basic_example_proto_rawDescOnce sync.Once
	file_idl_basic_example_proto_rawDescData = file_idl_basic_example_proto_rawDesc
)

func file_idl_basic_example_proto_rawDescGZIP() []byte {
	file_idl_basic_example_proto_rawDescOnce.Do(func() {
		file_idl_basic_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_basic_example_proto_rawDescData)
	})
	return file_idl_basic_example_proto_rawDescData
}

var file_idl_basic_example_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_idl_basic_example_proto_goTypes = []interface{}{
	(*BasicExample)(nil), // 0: pb3.BasicExample
	nil,                  // 1: pb3.BasicExample.MapInt64SINT32Entry
	nil,                  // 2: pb3.BasicExample.MapInt64Sfixed32Entry
	nil,                  // 3: pb3.BasicExample.MapInt64Fixed32Entry
	nil,                  // 4: pb3.BasicExample.MapInt64Uint32Entry
	nil,                  // 5: pb3.BasicExample.MapInt64DoubleEntry
	nil,                  // 6: pb3.BasicExample.MapInt64BoolEntry
	nil,                  // 7: pb3.BasicExample.MapInt64StringEntry
	nil,                  // 8: pb3.BasicExample.MapInt64BytesEntry
	nil,                  // 9: pb3.BasicExample.MapInt64FloatEntry
	nil,                  // 10: pb3.BasicExample.MapInt64Int32Entry
	nil,                  // 11: pb3.BasicExample.MapstringSINT64Entry
	nil,                  // 12: pb3.BasicExample.MapstringSfixed64Entry
	nil,                  // 13: pb3.BasicExample.MapstringFixed64Entry
	nil,                  // 14: pb3.BasicExample.MapstringUint64Entry
	nil,                  // 15: pb3.BasicExample.MapstringDoubleEntry
	nil,                  // 16: pb3.BasicExample.MapstringBoolEntry
	nil,                  // 17: pb3.BasicExample.MapstringStringEntry
	nil,                  // 18: pb3.BasicExample.MapstringBytesEntry
	nil,                  // 19: pb3.BasicExample.MapstringFloatEntry
	nil,                  // 20: pb3.BasicExample.MapstringInt64Entry
}
var file_idl_basic_example_proto_depIdxs = []int32{
	1,  // 0: pb3.BasicExample.MapInt64SINT32:type_name -> pb3.BasicExample.MapInt64SINT32Entry
	2,  // 1: pb3.BasicExample.MapInt64Sfixed32:type_name -> pb3.BasicExample.MapInt64Sfixed32Entry
	3,  // 2: pb3.BasicExample.MapInt64Fixed32:type_name -> pb3.BasicExample.MapInt64Fixed32Entry
	4,  // 3: pb3.BasicExample.MapInt64Uint32:type_name -> pb3.BasicExample.MapInt64Uint32Entry
	5,  // 4: pb3.BasicExample.MapInt64Double:type_name -> pb3.BasicExample.MapInt64DoubleEntry
	6,  // 5: pb3.BasicExample.MapInt64Bool:type_name -> pb3.BasicExample.MapInt64BoolEntry
	7,  // 6: pb3.BasicExample.MapInt64String:type_name -> pb3.BasicExample.MapInt64StringEntry
	8,  // 7: pb3.BasicExample.MapInt64Bytes:type_name -> pb3.BasicExample.MapInt64BytesEntry
	9,  // 8: pb3.BasicExample.MapInt64Float:type_name -> pb3.BasicExample.MapInt64FloatEntry
	10, // 9: pb3.BasicExample.MapInt64Int32:type_name -> pb3.BasicExample.MapInt64Int32Entry
	11, // 10: pb3.BasicExample.MapstringSINT64:type_name -> pb3.BasicExample.MapstringSINT64Entry
	12, // 11: pb3.BasicExample.MapstringSfixed64:type_name -> pb3.BasicExample.MapstringSfixed64Entry
	13, // 12: pb3.BasicExample.MapstringFixed64:type_name -> pb3.BasicExample.MapstringFixed64Entry
	14, // 13: pb3.BasicExample.MapstringUint64:type_name -> pb3.BasicExample.MapstringUint64Entry
	15, // 14: pb3.BasicExample.MapstringDouble:type_name -> pb3.BasicExample.MapstringDoubleEntry
	16, // 15: pb3.BasicExample.MapstringBool:type_name -> pb3.BasicExample.MapstringBoolEntry
	17, // 16: pb3.BasicExample.MapstringString:type_name -> pb3.BasicExample.MapstringStringEntry
	18, // 17: pb3.BasicExample.MapstringBytes:type_name -> pb3.BasicExample.MapstringBytesEntry
	19, // 18: pb3.BasicExample.MapstringFloat:type_name -> pb3.BasicExample.MapstringFloatEntry
	20, // 19: pb3.BasicExample.MapstringInt64:type_name -> pb3.BasicExample.MapstringInt64Entry
	0,  // 20: pb3.BasicService.ExampleMethod:input_type -> pb3.BasicExample
	0,  // 21: pb3.BasicService.ExampleMethod:output_type -> pb3.BasicExample
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_idl_basic_example_proto_init() }
func file_idl_basic_example_proto_init() {
	if File_idl_basic_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idl_basic_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_basic_example_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_basic_example_proto_goTypes,
		DependencyIndexes: file_idl_basic_example_proto_depIdxs,
		MessageInfos:      file_idl_basic_example_proto_msgTypes,
	}.Build()
	File_idl_basic_example_proto = out.File
	file_idl_basic_example_proto_rawDesc = nil
	file_idl_basic_example_proto_goTypes = nil
	file_idl_basic_example_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.9.1. DO NOT EDIT.

type BasicService interface {
	ExampleMethod(ctx context.Context, req *BasicExample) (res *BasicExample, err error)
}
