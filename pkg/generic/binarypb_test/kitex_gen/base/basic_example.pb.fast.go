// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package base

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BasicExample) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 25:
		offset, err = x.fastReadField25(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 26:
		offset, err = x.fastReadField26(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 28:
		offset, err = x.fastReadField28(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 29:
		offset, err = x.fastReadField29(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 30:
		offset, err = x.fastReadField30(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 31:
		offset, err = x.fastReadField31(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 32:
		offset, err = x.fastReadField32(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 33:
		offset, err = x.fastReadField33(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 34:
		offset, err = x.fastReadField34(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 35:
		offset, err = x.fastReadField35(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 36:
		offset, err = x.fastReadField36(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 37:
		offset, err = x.fastReadField37(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 38:
		offset, err = x.fastReadField38(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 39:
		offset, err = x.fastReadField39(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 40:
		offset, err = x.fastReadField40(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 41:
		offset, err = x.fastReadField41(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 42:
		offset, err = x.fastReadField42(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 43:
		offset, err = x.fastReadField43(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 44:
		offset, err = x.fastReadField44(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 45:
		offset, err = x.fastReadField45(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 46:
		offset, err = x.fastReadField46(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 47:
		offset, err = x.fastReadField47(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 48:
		offset, err = x.fastReadField48(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 49:
		offset, err = x.fastReadField49(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 50:
		offset, err = x.fastReadField50(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BasicExample[number], err)
}

func (x *BasicExample) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Int32, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Int64, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Uint32, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Uint64, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Sint32, offset, err = fastpb.ReadSint32(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Sint64, offset, err = fastpb.ReadSint64(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Sfixed32, offset, err = fastpb.ReadSfixed32(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Sfixed64, offset, err = fastpb.ReadSfixed64(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Fixed32, offset, err = fastpb.ReadFixed32(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Fixed64, offset, err = fastpb.ReadFixed64(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Float, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Double, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Bool, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Str, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Bytes, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BasicExample) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListInt32 = append(x.ListInt32, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListInt64 = append(x.ListInt64, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint32
			v, offset, err = fastpb.ReadUint32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListUint32 = append(x.ListUint32, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListUint64 = append(x.ListUint64, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadSint32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListSint32 = append(x.ListSint32, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadSint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListSint64 = append(x.ListSint64, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadSfixed32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListSfixed32 = append(x.ListSfixed32, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadSfixed64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListSfixed64 = append(x.ListSfixed64, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint32
			v, offset, err = fastpb.ReadFixed32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListFixed32 = append(x.ListFixed32, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField25(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadFixed64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListFixed64 = append(x.ListFixed64, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField26(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v float32
			v, offset, err = fastpb.ReadFloat(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListFloat = append(x.ListFloat, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v float64
			v, offset, err = fastpb.ReadDouble(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListDouble = append(x.ListDouble, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField28(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListBool = append(x.ListBool, v)
			return offset, err
		})
	return offset, err
}

func (x *BasicExample) fastReadField29(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ListString = append(x.ListString, v)
	return offset, err
}

func (x *BasicExample) fastReadField30(buf []byte, _type int8) (offset int, err error) {
	var v []byte
	v, offset, err = fastpb.ReadBytes(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ListBytes = append(x.ListBytes, v)
	return offset, err
}

func (x *BasicExample) fastReadField31(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64SINT32 == nil {
		x.MapInt64SINT32 = make(map[int64]int32)
	}
	var key int64
	var value int32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadSint32(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64SINT32[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField32(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Sfixed32 == nil {
		x.MapInt64Sfixed32 = make(map[int64]int32)
	}
	var key int64
	var value int32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadSfixed32(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Sfixed32[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField33(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Fixed32 == nil {
		x.MapInt64Fixed32 = make(map[int64]uint32)
	}
	var key int64
	var value uint32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadFixed32(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Fixed32[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField34(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Uint32 == nil {
		x.MapInt64Uint32 = make(map[int64]uint32)
	}
	var key int64
	var value uint32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadUint32(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Uint32[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField35(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Double == nil {
		x.MapInt64Double = make(map[int64]float64)
	}
	var key int64
	var value float64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadDouble(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Double[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField36(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Bool == nil {
		x.MapInt64Bool = make(map[int64]bool)
	}
	var key int64
	var value bool
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadBool(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Bool[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField37(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64String == nil {
		x.MapInt64String = make(map[int64]string)
	}
	var key int64
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64String[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField38(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Bytes == nil {
		x.MapInt64Bytes = make(map[int64][]byte)
	}
	var key int64
	var value []byte
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadBytes(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Bytes[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField39(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Float == nil {
		x.MapInt64Float = make(map[int64]float32)
	}
	var key int64
	var value float32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadFloat(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Float[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField40(buf []byte, _type int8) (offset int, err error) {
	if x.MapInt64Int32 == nil {
		x.MapInt64Int32 = make(map[int64]int32)
	}
	var key int64
	var value int32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapInt64Int32[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField41(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringSINT64 == nil {
		x.MapstringSINT64 = make(map[string]int64)
	}
	var key string
	var value int64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadSint64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringSINT64[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField42(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringSfixed64 == nil {
		x.MapstringSfixed64 = make(map[string]int64)
	}
	var key string
	var value int64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadSfixed64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringSfixed64[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField43(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringFixed64 == nil {
		x.MapstringFixed64 = make(map[string]uint64)
	}
	var key string
	var value uint64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadFixed64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringFixed64[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField44(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringUint64 == nil {
		x.MapstringUint64 = make(map[string]uint64)
	}
	var key string
	var value uint64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadUint64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringUint64[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField45(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringDouble == nil {
		x.MapstringDouble = make(map[string]float64)
	}
	var key string
	var value float64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadDouble(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringDouble[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField46(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringBool == nil {
		x.MapstringBool = make(map[string]bool)
	}
	var key string
	var value bool
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadBool(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringBool[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField47(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringString == nil {
		x.MapstringString = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringString[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField48(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringBytes == nil {
		x.MapstringBytes = make(map[string][]byte)
	}
	var key string
	var value []byte
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadBytes(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringBytes[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField49(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringFloat == nil {
		x.MapstringFloat = make(map[string]float32)
	}
	var key string
	var value float32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadFloat(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringFloat[key] = value
	return offset, nil
}

func (x *BasicExample) fastReadField50(buf []byte, _type int8) (offset int, err error) {
	if x.MapstringInt64 == nil {
		x.MapstringInt64 = make(map[string]int64)
	}
	var key string
	var value int64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapstringInt64[key] = value
	return offset, nil
}

func (x *BasicExample) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	offset += x.fastWriteField25(buf[offset:])
	offset += x.fastWriteField26(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField28(buf[offset:])
	offset += x.fastWriteField29(buf[offset:])
	offset += x.fastWriteField30(buf[offset:])
	offset += x.fastWriteField31(buf[offset:])
	offset += x.fastWriteField32(buf[offset:])
	offset += x.fastWriteField33(buf[offset:])
	offset += x.fastWriteField34(buf[offset:])
	offset += x.fastWriteField35(buf[offset:])
	offset += x.fastWriteField36(buf[offset:])
	offset += x.fastWriteField37(buf[offset:])
	offset += x.fastWriteField38(buf[offset:])
	offset += x.fastWriteField39(buf[offset:])
	offset += x.fastWriteField40(buf[offset:])
	offset += x.fastWriteField41(buf[offset:])
	offset += x.fastWriteField42(buf[offset:])
	offset += x.fastWriteField43(buf[offset:])
	offset += x.fastWriteField44(buf[offset:])
	offset += x.fastWriteField45(buf[offset:])
	offset += x.fastWriteField46(buf[offset:])
	offset += x.fastWriteField47(buf[offset:])
	offset += x.fastWriteField48(buf[offset:])
	offset += x.fastWriteField49(buf[offset:])
	offset += x.fastWriteField50(buf[offset:])
	return offset
}

func (x *BasicExample) fastWriteField1(buf []byte) (offset int) {
	if x.Int32 == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetInt32())
	return offset
}

func (x *BasicExample) fastWriteField2(buf []byte) (offset int) {
	if x.Int64 == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetInt64())
	return offset
}

func (x *BasicExample) fastWriteField3(buf []byte) (offset int) {
	if x.Uint32 == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetUint32())
	return offset
}

func (x *BasicExample) fastWriteField4(buf []byte) (offset int) {
	if x.Uint64 == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 4, x.GetUint64())
	return offset
}

func (x *BasicExample) fastWriteField5(buf []byte) (offset int) {
	if x.Sint32 == 0 {
		return offset
	}
	offset += fastpb.WriteSint32(buf[offset:], 5, x.GetSint32())
	return offset
}

func (x *BasicExample) fastWriteField6(buf []byte) (offset int) {
	if x.Sint64 == 0 {
		return offset
	}
	offset += fastpb.WriteSint64(buf[offset:], 6, x.GetSint64())
	return offset
}

func (x *BasicExample) fastWriteField7(buf []byte) (offset int) {
	if x.Sfixed32 == 0 {
		return offset
	}
	offset += fastpb.WriteSfixed32(buf[offset:], 7, x.GetSfixed32())
	return offset
}

func (x *BasicExample) fastWriteField8(buf []byte) (offset int) {
	if x.Sfixed64 == 0 {
		return offset
	}
	offset += fastpb.WriteSfixed64(buf[offset:], 8, x.GetSfixed64())
	return offset
}

func (x *BasicExample) fastWriteField9(buf []byte) (offset int) {
	if x.Fixed32 == 0 {
		return offset
	}
	offset += fastpb.WriteFixed32(buf[offset:], 9, x.GetFixed32())
	return offset
}

func (x *BasicExample) fastWriteField10(buf []byte) (offset int) {
	if x.Fixed64 == 0 {
		return offset
	}
	offset += fastpb.WriteFixed64(buf[offset:], 10, x.GetFixed64())
	return offset
}

func (x *BasicExample) fastWriteField11(buf []byte) (offset int) {
	if x.Float == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 11, x.GetFloat())
	return offset
}

func (x *BasicExample) fastWriteField12(buf []byte) (offset int) {
	if x.Double == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetDouble())
	return offset
}

func (x *BasicExample) fastWriteField13(buf []byte) (offset int) {
	if !x.Bool {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 13, x.GetBool())
	return offset
}

func (x *BasicExample) fastWriteField14(buf []byte) (offset int) {
	if x.Str == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetStr())
	return offset
}

func (x *BasicExample) fastWriteField15(buf []byte) (offset int) {
	if len(x.Bytes) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 15, x.GetBytes())
	return offset
}

func (x *BasicExample) fastWriteField16(buf []byte) (offset int) {
	if len(x.ListInt32) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 16, len(x.GetListInt32()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetListInt32()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField17(buf []byte) (offset int) {
	if len(x.ListInt64) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 17, len(x.GetListInt64()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetListInt64()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField18(buf []byte) (offset int) {
	if len(x.ListUint32) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 18, len(x.GetListUint32()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint32(buf[offset:], numTagOrKey, x.GetListUint32()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField19(buf []byte) (offset int) {
	if len(x.ListUint64) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 19, len(x.GetListUint64()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetListUint64()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField20(buf []byte) (offset int) {
	if len(x.ListSint32) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 20, len(x.GetListSint32()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteSint32(buf[offset:], numTagOrKey, x.GetListSint32()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField21(buf []byte) (offset int) {
	if len(x.ListSint64) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 21, len(x.GetListSint64()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteSint64(buf[offset:], numTagOrKey, x.GetListSint64()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField22(buf []byte) (offset int) {
	if len(x.ListSfixed32) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 22, len(x.GetListSfixed32()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteSfixed32(buf[offset:], numTagOrKey, x.GetListSfixed32()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField23(buf []byte) (offset int) {
	if len(x.ListSfixed64) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 23, len(x.GetListSfixed64()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteSfixed64(buf[offset:], numTagOrKey, x.GetListSfixed64()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField24(buf []byte) (offset int) {
	if len(x.ListFixed32) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 24, len(x.GetListFixed32()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteFixed32(buf[offset:], numTagOrKey, x.GetListFixed32()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField25(buf []byte) (offset int) {
	if len(x.ListFixed64) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 25, len(x.GetListFixed64()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteFixed64(buf[offset:], numTagOrKey, x.GetListFixed64()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField26(buf []byte) (offset int) {
	if len(x.ListFloat) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 26, len(x.GetListFloat()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteFloat(buf[offset:], numTagOrKey, x.GetListFloat()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField27(buf []byte) (offset int) {
	if len(x.ListDouble) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 27, len(x.GetListDouble()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteDouble(buf[offset:], numTagOrKey, x.GetListDouble()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField28(buf []byte) (offset int) {
	if len(x.ListBool) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 28, len(x.GetListBool()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetListBool()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *BasicExample) fastWriteField29(buf []byte) (offset int) {
	if len(x.ListString) == 0 {
		return offset
	}
	for i := range x.GetListString() {
		offset += fastpb.WriteString(buf[offset:], 29, x.GetListString()[i])
	}
	return offset
}

func (x *BasicExample) fastWriteField30(buf []byte) (offset int) {
	if len(x.ListBytes) == 0 {
		return offset
	}
	for i := range x.GetListBytes() {
		offset += fastpb.WriteBytes(buf[offset:], 30, x.GetListBytes()[i])
	}
	return offset
}

func (x *BasicExample) fastWriteField31(buf []byte) (offset int) {
	if x.MapInt64SINT32 == nil {
		return offset
	}
	for k, v := range x.GetMapInt64SINT32() {
		offset += fastpb.WriteMapEntry(buf[offset:], 31,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteSint32(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField32(buf []byte) (offset int) {
	if x.MapInt64Sfixed32 == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Sfixed32() {
		offset += fastpb.WriteMapEntry(buf[offset:], 32,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteSfixed32(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField33(buf []byte) (offset int) {
	if x.MapInt64Fixed32 == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Fixed32() {
		offset += fastpb.WriteMapEntry(buf[offset:], 33,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteFixed32(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField34(buf []byte) (offset int) {
	if x.MapInt64Uint32 == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Uint32() {
		offset += fastpb.WriteMapEntry(buf[offset:], 34,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteUint32(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField35(buf []byte) (offset int) {
	if x.MapInt64Double == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Double() {
		offset += fastpb.WriteMapEntry(buf[offset:], 35,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteDouble(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField36(buf []byte) (offset int) {
	if x.MapInt64Bool == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Bool() {
		offset += fastpb.WriteMapEntry(buf[offset:], 36,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteBool(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField37(buf []byte) (offset int) {
	if x.MapInt64String == nil {
		return offset
	}
	for k, v := range x.GetMapInt64String() {
		offset += fastpb.WriteMapEntry(buf[offset:], 37,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField38(buf []byte) (offset int) {
	if x.MapInt64Bytes == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Bytes() {
		offset += fastpb.WriteMapEntry(buf[offset:], 38,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteBytes(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField39(buf []byte) (offset int) {
	if x.MapInt64Float == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Float() {
		offset += fastpb.WriteMapEntry(buf[offset:], 39,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteFloat(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField40(buf []byte) (offset int) {
	if x.MapInt64Int32 == nil {
		return offset
	}
	for k, v := range x.GetMapInt64Int32() {
		offset += fastpb.WriteMapEntry(buf[offset:], 40,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField41(buf []byte) (offset int) {
	if x.MapstringSINT64 == nil {
		return offset
	}
	for k, v := range x.GetMapstringSINT64() {
		offset += fastpb.WriteMapEntry(buf[offset:], 41,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteSint64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField42(buf []byte) (offset int) {
	if x.MapstringSfixed64 == nil {
		return offset
	}
	for k, v := range x.GetMapstringSfixed64() {
		offset += fastpb.WriteMapEntry(buf[offset:], 42,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteSfixed64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField43(buf []byte) (offset int) {
	if x.MapstringFixed64 == nil {
		return offset
	}
	for k, v := range x.GetMapstringFixed64() {
		offset += fastpb.WriteMapEntry(buf[offset:], 43,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteFixed64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField44(buf []byte) (offset int) {
	if x.MapstringUint64 == nil {
		return offset
	}
	for k, v := range x.GetMapstringUint64() {
		offset += fastpb.WriteMapEntry(buf[offset:], 44,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteUint64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField45(buf []byte) (offset int) {
	if x.MapstringDouble == nil {
		return offset
	}
	for k, v := range x.GetMapstringDouble() {
		offset += fastpb.WriteMapEntry(buf[offset:], 45,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteDouble(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField46(buf []byte) (offset int) {
	if x.MapstringBool == nil {
		return offset
	}
	for k, v := range x.GetMapstringBool() {
		offset += fastpb.WriteMapEntry(buf[offset:], 46,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteBool(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField47(buf []byte) (offset int) {
	if x.MapstringString == nil {
		return offset
	}
	for k, v := range x.GetMapstringString() {
		offset += fastpb.WriteMapEntry(buf[offset:], 47,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField48(buf []byte) (offset int) {
	if x.MapstringBytes == nil {
		return offset
	}
	for k, v := range x.GetMapstringBytes() {
		offset += fastpb.WriteMapEntry(buf[offset:], 48,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteBytes(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField49(buf []byte) (offset int) {
	if x.MapstringFloat == nil {
		return offset
	}
	for k, v := range x.GetMapstringFloat() {
		offset += fastpb.WriteMapEntry(buf[offset:], 49,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteFloat(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) fastWriteField50(buf []byte) (offset int) {
	if x.MapstringInt64 == nil {
		return offset
	}
	for k, v := range x.GetMapstringInt64() {
		offset += fastpb.WriteMapEntry(buf[offset:], 50,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *BasicExample) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	n += x.sizeField25()
	n += x.sizeField26()
	n += x.sizeField27()
	n += x.sizeField28()
	n += x.sizeField29()
	n += x.sizeField30()
	n += x.sizeField31()
	n += x.sizeField32()
	n += x.sizeField33()
	n += x.sizeField34()
	n += x.sizeField35()
	n += x.sizeField36()
	n += x.sizeField37()
	n += x.sizeField38()
	n += x.sizeField39()
	n += x.sizeField40()
	n += x.sizeField41()
	n += x.sizeField42()
	n += x.sizeField43()
	n += x.sizeField44()
	n += x.sizeField45()
	n += x.sizeField46()
	n += x.sizeField47()
	n += x.sizeField48()
	n += x.sizeField49()
	n += x.sizeField50()
	return n
}

func (x *BasicExample) sizeField1() (n int) {
	if x.Int32 == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetInt32())
	return n
}

func (x *BasicExample) sizeField2() (n int) {
	if x.Int64 == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetInt64())
	return n
}

func (x *BasicExample) sizeField3() (n int) {
	if x.Uint32 == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetUint32())
	return n
}

func (x *BasicExample) sizeField4() (n int) {
	if x.Uint64 == 0 {
		return n
	}
	n += fastpb.SizeUint64(4, x.GetUint64())
	return n
}

func (x *BasicExample) sizeField5() (n int) {
	if x.Sint32 == 0 {
		return n
	}
	n += fastpb.SizeSint32(5, x.GetSint32())
	return n
}

func (x *BasicExample) sizeField6() (n int) {
	if x.Sint64 == 0 {
		return n
	}
	n += fastpb.SizeSint64(6, x.GetSint64())
	return n
}

func (x *BasicExample) sizeField7() (n int) {
	if x.Sfixed32 == 0 {
		return n
	}
	n += fastpb.SizeSfixed32(7, x.GetSfixed32())
	return n
}

func (x *BasicExample) sizeField8() (n int) {
	if x.Sfixed64 == 0 {
		return n
	}
	n += fastpb.SizeSfixed64(8, x.GetSfixed64())
	return n
}

func (x *BasicExample) sizeField9() (n int) {
	if x.Fixed32 == 0 {
		return n
	}
	n += fastpb.SizeFixed32(9, x.GetFixed32())
	return n
}

func (x *BasicExample) sizeField10() (n int) {
	if x.Fixed64 == 0 {
		return n
	}
	n += fastpb.SizeFixed64(10, x.GetFixed64())
	return n
}

func (x *BasicExample) sizeField11() (n int) {
	if x.Float == 0 {
		return n
	}
	n += fastpb.SizeFloat(11, x.GetFloat())
	return n
}

func (x *BasicExample) sizeField12() (n int) {
	if x.Double == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetDouble())
	return n
}

func (x *BasicExample) sizeField13() (n int) {
	if !x.Bool {
		return n
	}
	n += fastpb.SizeBool(13, x.GetBool())
	return n
}

func (x *BasicExample) sizeField14() (n int) {
	if x.Str == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetStr())
	return n
}

func (x *BasicExample) sizeField15() (n int) {
	if len(x.Bytes) == 0 {
		return n
	}
	n += fastpb.SizeBytes(15, x.GetBytes())
	return n
}

func (x *BasicExample) sizeField16() (n int) {
	if len(x.ListInt32) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(16, len(x.GetListInt32()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetListInt32()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField17() (n int) {
	if len(x.ListInt64) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(17, len(x.GetListInt64()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetListInt64()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField18() (n int) {
	if len(x.ListUint32) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(18, len(x.GetListUint32()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint32(numTagOrKey, x.GetListUint32()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField19() (n int) {
	if len(x.ListUint64) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(19, len(x.GetListUint64()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetListUint64()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField20() (n int) {
	if len(x.ListSint32) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(20, len(x.GetListSint32()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeSint32(numTagOrKey, x.GetListSint32()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField21() (n int) {
	if len(x.ListSint64) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(21, len(x.GetListSint64()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeSint64(numTagOrKey, x.GetListSint64()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField22() (n int) {
	if len(x.ListSfixed32) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(22, len(x.GetListSfixed32()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeSfixed32(numTagOrKey, x.GetListSfixed32()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField23() (n int) {
	if len(x.ListSfixed64) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(23, len(x.GetListSfixed64()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeSfixed64(numTagOrKey, x.GetListSfixed64()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField24() (n int) {
	if len(x.ListFixed32) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(24, len(x.GetListFixed32()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeFixed32(numTagOrKey, x.GetListFixed32()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField25() (n int) {
	if len(x.ListFixed64) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(25, len(x.GetListFixed64()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeFixed64(numTagOrKey, x.GetListFixed64()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField26() (n int) {
	if len(x.ListFloat) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(26, len(x.GetListFloat()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeFloat(numTagOrKey, x.GetListFloat()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField27() (n int) {
	if len(x.ListDouble) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(27, len(x.GetListDouble()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeDouble(numTagOrKey, x.GetListDouble()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField28() (n int) {
	if len(x.ListBool) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(28, len(x.GetListBool()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetListBool()[numIdxOrVal])
			return n
		})
	return n
}

func (x *BasicExample) sizeField29() (n int) {
	if len(x.ListString) == 0 {
		return n
	}
	for i := range x.GetListString() {
		n += fastpb.SizeString(29, x.GetListString()[i])
	}
	return n
}

func (x *BasicExample) sizeField30() (n int) {
	if len(x.ListBytes) == 0 {
		return n
	}
	for i := range x.GetListBytes() {
		n += fastpb.SizeBytes(30, x.GetListBytes()[i])
	}
	return n
}

func (x *BasicExample) sizeField31() (n int) {
	if x.MapInt64SINT32 == nil {
		return n
	}
	for k, v := range x.GetMapInt64SINT32() {
		n += fastpb.SizeMapEntry(31,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeSint32(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField32() (n int) {
	if x.MapInt64Sfixed32 == nil {
		return n
	}
	for k, v := range x.GetMapInt64Sfixed32() {
		n += fastpb.SizeMapEntry(32,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeSfixed32(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField33() (n int) {
	if x.MapInt64Fixed32 == nil {
		return n
	}
	for k, v := range x.GetMapInt64Fixed32() {
		n += fastpb.SizeMapEntry(33,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeFixed32(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField34() (n int) {
	if x.MapInt64Uint32 == nil {
		return n
	}
	for k, v := range x.GetMapInt64Uint32() {
		n += fastpb.SizeMapEntry(34,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeUint32(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField35() (n int) {
	if x.MapInt64Double == nil {
		return n
	}
	for k, v := range x.GetMapInt64Double() {
		n += fastpb.SizeMapEntry(35,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeDouble(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField36() (n int) {
	if x.MapInt64Bool == nil {
		return n
	}
	for k, v := range x.GetMapInt64Bool() {
		n += fastpb.SizeMapEntry(36,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeBool(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField37() (n int) {
	if x.MapInt64String == nil {
		return n
	}
	for k, v := range x.GetMapInt64String() {
		n += fastpb.SizeMapEntry(37,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField38() (n int) {
	if x.MapInt64Bytes == nil {
		return n
	}
	for k, v := range x.GetMapInt64Bytes() {
		n += fastpb.SizeMapEntry(38,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeBytes(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField39() (n int) {
	if x.MapInt64Float == nil {
		return n
	}
	for k, v := range x.GetMapInt64Float() {
		n += fastpb.SizeMapEntry(39,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeFloat(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField40() (n int) {
	if x.MapInt64Int32 == nil {
		return n
	}
	for k, v := range x.GetMapInt64Int32() {
		n += fastpb.SizeMapEntry(40,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField41() (n int) {
	if x.MapstringSINT64 == nil {
		return n
	}
	for k, v := range x.GetMapstringSINT64() {
		n += fastpb.SizeMapEntry(41,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeSint64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField42() (n int) {
	if x.MapstringSfixed64 == nil {
		return n
	}
	for k, v := range x.GetMapstringSfixed64() {
		n += fastpb.SizeMapEntry(42,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeSfixed64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField43() (n int) {
	if x.MapstringFixed64 == nil {
		return n
	}
	for k, v := range x.GetMapstringFixed64() {
		n += fastpb.SizeMapEntry(43,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeFixed64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField44() (n int) {
	if x.MapstringUint64 == nil {
		return n
	}
	for k, v := range x.GetMapstringUint64() {
		n += fastpb.SizeMapEntry(44,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeUint64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField45() (n int) {
	if x.MapstringDouble == nil {
		return n
	}
	for k, v := range x.GetMapstringDouble() {
		n += fastpb.SizeMapEntry(45,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeDouble(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField46() (n int) {
	if x.MapstringBool == nil {
		return n
	}
	for k, v := range x.GetMapstringBool() {
		n += fastpb.SizeMapEntry(46,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeBool(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField47() (n int) {
	if x.MapstringString == nil {
		return n
	}
	for k, v := range x.GetMapstringString() {
		n += fastpb.SizeMapEntry(47,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField48() (n int) {
	if x.MapstringBytes == nil {
		return n
	}
	for k, v := range x.GetMapstringBytes() {
		n += fastpb.SizeMapEntry(48,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeBytes(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField49() (n int) {
	if x.MapstringFloat == nil {
		return n
	}
	for k, v := range x.GetMapstringFloat() {
		n += fastpb.SizeMapEntry(49,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeFloat(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *BasicExample) sizeField50() (n int) {
	if x.MapstringInt64 == nil {
		return n
	}
	for k, v := range x.GetMapstringInt64() {
		n += fastpb.SizeMapEntry(50,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeInt64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

var fieldIDToName_BasicExample = map[int32]string{
	1:  "Int32",
	2:  "Int64",
	3:  "Uint32",
	4:  "Uint64",
	5:  "Sint32",
	6:  "Sint64",
	7:  "Sfixed32",
	8:  "Sfixed64",
	9:  "Fixed32",
	10: "Fixed64",
	11: "Float",
	12: "Double",
	13: "Bool",
	14: "Str",
	15: "Bytes",
	16: "ListInt32",
	17: "ListInt64",
	18: "ListUint32",
	19: "ListUint64",
	20: "ListSint32",
	21: "ListSint64",
	22: "ListSfixed32",
	23: "ListSfixed64",
	24: "ListFixed32",
	25: "ListFixed64",
	26: "ListFloat",
	27: "ListDouble",
	28: "ListBool",
	29: "ListString",
	30: "ListBytes",
	31: "MapInt64SINT32",
	32: "MapInt64Sfixed32",
	33: "MapInt64Fixed32",
	34: "MapInt64Uint32",
	35: "MapInt64Double",
	36: "MapInt64Bool",
	37: "MapInt64String",
	38: "MapInt64Bytes",
	39: "MapInt64Float",
	40: "MapInt64Int32",
	41: "MapstringSINT64",
	42: "MapstringSfixed64",
	43: "MapstringFixed64",
	44: "MapstringUint64",
	45: "MapstringDouble",
	46: "MapstringBool",
	47: "MapstringString",
	48: "MapstringBytes",
	49: "MapstringFloat",
	50: "MapstringInt64",
}
