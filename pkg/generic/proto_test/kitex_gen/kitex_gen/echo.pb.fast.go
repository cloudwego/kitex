// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package kitex_gen

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Elem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Elem[number], err)
}

func (x *Elem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Tiny, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Large, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tenum = TestEnum(v)
	return offset, nil
}

func (x *Message) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Str, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	if x.Elems == nil {
		x.Elems = make(map[string]*Elem)
	}
	var key string
	var value *Elem
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v Elem
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Elems[key] = value
	return offset, nil
}

func (x *Message) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v Elem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Els = append(x.Els, &v)
	return offset, nil
}

func (x *Elem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Elem) fastWriteField1(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOk())
	return offset
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.Tiny == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetTiny())
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.Large == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetLarge())
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.Tenum == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetTenum()))
	return offset
}

func (x *Message) fastWriteField4(buf []byte) (offset int) {
	if x.Str == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetStr())
	return offset
}

func (x *Message) fastWriteField5(buf []byte) (offset int) {
	if x.Elems == nil {
		return offset
	}
	for k, v := range x.GetElems() {
		offset += fastpb.WriteMapEntry(buf[offset:], 5,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField6(buf []byte) (offset int) {
	if x.Els == nil {
		return offset
	}
	for i := range x.GetEls() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetEls()[i])
	}
	return offset
}

func (x *Elem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Elem) sizeField1() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOk())
	return n
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.Tiny == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetTiny())
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.Large == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetLarge())
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.Tenum == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetTenum()))
	return n
}

func (x *Message) sizeField4() (n int) {
	if x.Str == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetStr())
	return n
}

func (x *Message) sizeField5() (n int) {
	if x.Elems == nil {
		return n
	}
	for k, v := range x.GetElems() {
		n += fastpb.SizeMapEntry(5,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Message) sizeField6() (n int) {
	if x.Els == nil {
		return n
	}
	for i := range x.GetEls() {
		n += fastpb.SizeMessage(6, x.GetEls()[i])
	}
	return n
}

var fieldIDToName_Elem = map[int32]string{
	1: "Ok",
}

var fieldIDToName_Message = map[int32]string{
	1: "Tiny",
	2: "Large",
	3: "Tenum",
	4: "Str",
	5: "Elems",
	6: "Els",
}
