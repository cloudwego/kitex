/*
 * Copyright 2021 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package generic

import (
	"context"
	"encoding/binary"
	"fmt"

	"github.com/jackedelic/kitex/internal/pkg/remote"
	"github.com/jackedelic/kitex/internal/pkg/remote/codec"
	"github.com/jackedelic/kitex/internal/pkg/remote/codec/perrors"
	"github.com/jackedelic/kitex/internal/pkg/rpcinfo"
	"github.com/jackedelic/kitex/internal/pkg/serviceinfo"
)

var _ remote.PayloadCodec = &binaryThriftCodec{}

type binaryReqType = []byte

type binaryThriftCodec struct {
	thriftCodec remote.PayloadCodec
}

func (c *binaryThriftCodec) Marshal(ctx context.Context, msg remote.Message, out remote.ByteBuffer) error {
	data := msg.Data()
	if data == nil {
		return perrors.NewProtocolErrorWithMsg("invalid marshal data in rawThriftBinaryCodec: nil")
	}
	if msg.MessageType() == remote.Exception {
		if ink, ok := msg.RPCInfo().Invocation().(rpcinfo.InvocationSetter); ok {
			ink.SetMethodName(serviceinfo.GenericMethod)
		}
		if err := c.thriftCodec.Marshal(ctx, msg, out); err != nil {
			return perrors.NewProtocolErrorWithMsg(fmt.Sprintf("rawThriftBinaryCodec Marshal exception failed, err: %s", err.Error()))
		}
		return nil
	}
	var transBuff []byte
	var ok bool
	if msg.RPCRole() == remote.Server {
		gResult := data.(*Result)
		transBinary := gResult.Success
		if transBuff, ok = transBinary.(binaryReqType); !ok {
			return perrors.NewProtocolErrorWithMsg("invalid marshal result in rawThriftBinaryCodec: must be []byte")
		}
	} else {
		gArg := data.(*Args)
		transBinary := gArg.Request
		if transBuff, ok = transBinary.(binaryReqType); !ok {
			return perrors.NewProtocolErrorWithMsg("invalid marshal request in rawThriftBinaryCodec: must be []byte")
		}
		if err := setSeqID(msg.RPCInfo().Invocation().SeqID(), transBuff); err != nil {
			return perrors.NewProtocolErrorWithMsg(fmt.Sprintf("rawThriftBinaryCodec set seqID failed, err: %s", err.Error()))
		}
	}
	out.WriteBinary(transBuff)
	return nil
}

// kitex will gen seqID and set it into transport protocol, to ignore inconsistent seqID
// between thrift payload and transport protocol, reset the seqID to that generated by kitex
func setSeqID(seqID int32, transBuff []byte) error {
	idx := 4
	ret, e := codec.Bytes2Uint32(transBuff[:idx])
	if e != nil {
		return e
	}
	size := int32(ret)
	if size > 0 {
		return perrors.NewProtocolErrorWithMsg("missing version in Thrift Message")
	}
	version := int64(size) & codec.MagicMask
	if version != codec.ThriftV1Magic {
		return perrors.NewProtocolErrorWithType(perrors.BadVersion, "bad version in Thrift Message")
	}
	idx += 4
	ret, e = codec.Bytes2Uint32(transBuff[4:idx])
	if e != nil {
		return e
	}
	size = int32(ret)
	if size < 0 {
		return perrors.InvalidDataLength
	}
	idx += int(size)
	if len(transBuff) < idx+4 {
		return perrors.NewProtocolErrorWithMsg("invalid trans buffer")
	}
	binary.BigEndian.PutUint32(transBuff[idx:idx+4], uint32(seqID))
	return nil
}

func (c *binaryThriftCodec) Unmarshal(ctx context.Context, msg remote.Message, in remote.ByteBuffer) error {
	magicAndMsgType, err := codec.PeekUint32(in)
	if err != nil {
		return err
	}
	msgType := magicAndMsgType & codec.FrontMask
	if msgType == uint32(remote.Exception) {
		return c.thriftCodec.Unmarshal(ctx, msg, in)
	}
	payloadLen := msg.PayloadLen()
	transBuff, err := in.ReadBinary(payloadLen)
	if err != nil {
		return err
	}
	if err := readBinaryMethod(transBuff, msg); err != nil {
		return err
	}

	if err = codec.NewDataIfNeeded(serviceinfo.GenericMethod, msg); err != nil {
		return err
	}
	data := msg.Data()
	if msg.RPCRole() == remote.Server {
		gArg := data.(*Args)
		gArg.Method = msg.RPCInfo().Invocation().MethodName()
		gArg.Request = transBuff
	} else {
		gResult := data.(*Result)
		gResult.Success = transBuff
	}
	return nil
}

func (c *binaryThriftCodec) Name() string {
	return "RawThriftBinary"
}

func readBinaryMethod(buff []byte, msg remote.Message) error {
	bufLen := len(buff)
	if bufLen < codec.Size32*2 {
		return perrors.NewProtocolErrorWithMsg(
			fmt.Sprintf("invalid trans buffer in binaryThriftCodec Unmarshal, size=%d less than 8 bytes", bufLen))
	}
	methodLen := int(binary.BigEndian.Uint32(buff[4:8]))
	if bufLen < codec.Size32*2+methodLen || methodLen <= 0 {
		return perrors.NewProtocolErrorWithMsg(fmt.Sprintf("method len[%d] invalid in binaryThriftCodec Unmarshal", methodLen))
	}
	method := string(buff[8:(8 + methodLen)])
	if err := codec.SetOrCheckMethodName(method, msg); err != nil {
		return perrors.NewProtocolError(err)
	}
	return nil
}
