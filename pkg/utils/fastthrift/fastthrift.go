/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fastthrift

import (
	"errors"

	"github.com/bytedance/gopkg/lang/dirtmake"

	"github.com/cloudwego/kitex/pkg/protocol/bthrift"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
)

// FastMarshal marshals the msg to buf. The msg should be generated by Kitex tool and implement ThriftFastCodec.
func FastMarshal(msg bthrift.ThriftFastCodec) []byte {
	sz := msg.BLength()
	buf := dirtmake.Bytes(sz, sz)
	msg.FastWriteNocopy(buf, nil)
	return buf
}

// FastUnmarshal unmarshal the buf into msg. The msg should be generated by Kitex tool and implement ThriftFastCodec.
func FastUnmarshal(buf []byte, msg bthrift.ThriftFastCodec) error {
	_, err := msg.FastRead(buf)
	return err
}

// for msgType of MarshalMsg
// Please use theses consts instead of relying on apache thrift.TMessageType
const (
	CALL      = uint8(1)
	REPLY     = uint8(2)
	EXCEPTION = uint8(3)
	ONEWAY    = uint8(4)
)

// MarshalMsg encodes the given msg to buf for generic thrift RPC.
func MarshalMsg(method string, msgType uint8, seq int32, msg bthrift.ThriftFastCodec) ([]byte, error) {
	if method == "" {
		return nil, errors.New("method not set")
	}
	sz := bthrift.Binary.MessageBeginLength(method, thrift.TMessageType(msgType), seq) + msg.BLength()
	b := dirtmake.Bytes(sz, sz)
	i := bthrift.Binary.WriteMessageBegin(b, method, thrift.TMessageType(msgType), seq)
	_ = msg.FastWriteNocopy(b[i:], nil)
	return b, nil
}

// UnmarshalMsg parses the given buf and stores the result to msg for generic thrift RPC.
// for EXCEPTION msgType, it will returns `err` with *bthrift.ApplicationException type without storing the result to msg.
func UnmarshalMsg(b []byte, msg bthrift.ThriftFastCodec) (method string, seq int32, err error) {
	method, msgType, seq, i, err := bthrift.Binary.ReadMessageBegin(b)
	if err != nil {
		return "", 0, err
	}
	b = b[i:]

	if uint8(msgType) == EXCEPTION {
		ex := bthrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "")
		_, err = ex.FastRead(b)
		if err != nil {
			return method, seq, err
		}
		return method, seq, ex
	}
	_, err = msg.FastRead(b)
	return method, seq, err
}
