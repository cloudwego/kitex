/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by Kitex v0.3.4. DO NOT EDIT.

package aggregateddiscoveryservice

import (
	"context"

	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
	v3discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	StreamAggregatedResources(ctx context.Context, callOptions ...callopt.Option) (stream AggregatedDiscoveryService_StreamAggregatedResourcesClient, err error)
	DeltaAggregatedResources(ctx context.Context, callOptions ...callopt.Option) (stream AggregatedDiscoveryService_DeltaAggregatedResourcesClient, err error)
}

type AggregatedDiscoveryService_StreamAggregatedResourcesClient interface {
	streaming.Stream
	Send(*v3discovery.DiscoveryRequest) error
	Recv() (*v3discovery.DiscoveryResponse, error)
}

type AggregatedDiscoveryService_DeltaAggregatedResourcesClient interface {
	streaming.Stream
	Send(*v3discovery.DeltaDiscoveryRequest) error
	Recv() (*v3discovery.DeltaDiscoveryResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAggregatedDiscoveryServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAggregatedDiscoveryServiceClient struct {
	*kClient
}

func (p *kAggregatedDiscoveryServiceClient) StreamAggregatedResources(ctx context.Context, callOptions ...callopt.Option) (stream AggregatedDiscoveryService_StreamAggregatedResourcesClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StreamAggregatedResources(ctx)
}

func (p *kAggregatedDiscoveryServiceClient) DeltaAggregatedResources(ctx context.Context, callOptions ...callopt.Option) (stream AggregatedDiscoveryService_DeltaAggregatedResourcesClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeltaAggregatedResources(ctx)
}
