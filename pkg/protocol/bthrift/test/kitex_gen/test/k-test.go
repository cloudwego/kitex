// Code generated by Kitex v0.5.0. DO NOT EDIT.

package test

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/cloudwego/kitex/pkg/protocol/bthrift"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
)

func (p *Inner) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, f, err2 := bthrift.ReadUnknownField(buf[offset:], name, fieldTypeId, fieldId)
			offset += l
			if err2 != nil {
				err = err2
				goto UnknownFieldsAppendError
			}
			p._unknownFields = append(p._unknownFields, f)
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Inner[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return offset, thrift.PrependError(fmt.Sprintf("%T append unknown field(name: %s type: %d id: %d) error: ", p, name, fieldTypeId, fieldId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Inner) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Num = v

	}
	return offset, nil
}

func (p *Inner) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Desc = &v

	}
	return offset, nil
}

func (p *Inner) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MapOfList = make(map[int64][]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_elem = v

			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MapOfList[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *Inner) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MapOfEnumKey = make(map[AEnum]int64, size)
	for i := 0; i < size; i++ {
		var _key AEnum
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = AEnum(v)

		}

		var _val int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.MapOfEnumKey[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *Inner) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadByte(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Byte1 = &v

	}
	return offset, nil
}

func (p *Inner) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Double1 = &v

	}
	return offset, nil
}

// for compatibility
func (p *Inner) FastWrite(buf []byte) int {
	return 0
}

func (p *Inner) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "Inner")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		l, err := bthrift.WriteUnknownFields(buf[offset:], p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T write unknown field: %s", p, err))
		}
		offset += l
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *Inner) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("Inner")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		unknownL, err := bthrift.UnknownFieldsLength(p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T unknown fields length: %s", p, err))
		}
		l += unknownL
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *Inner) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Num", thrift.I32, 1)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.Num)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Inner) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDesc() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "desc", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Desc)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Inner) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMapOfList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapOfList", thrift.MAP, 3)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.LIST, 0)
		var length int
		for k, v := range p.MapOfList {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			listBeginOffset := offset
			offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
			var length int
			for _, v := range v {
				length++
				offset += bthrift.Binary.WriteI64(buf[offset:], v)

			}
			bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
			offset += bthrift.Binary.WriteListEnd(buf[offset:])
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.LIST, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Inner) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMapOfEnumKey() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapOfEnumKey", thrift.MAP, 4)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, 0)
		var length int
		for k, v := range p.MapOfEnumKey {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], int32(k))

			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I64, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Inner) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetByte1() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Byte1", thrift.BYTE, 5)
		offset += bthrift.Binary.WriteByte(buf[offset:], *p.Byte1)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Inner) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDouble1() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Double1", thrift.DOUBLE, 6)
		offset += bthrift.Binary.WriteDouble(buf[offset:], *p.Double1)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Inner) field1Length() int {
	l := 0
	if p.IsSetNum() {
		l += bthrift.Binary.FieldBeginLength("Num", thrift.I32, 1)
		l += bthrift.Binary.I32Length(p.Num)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Inner) field2Length() int {
	l := 0
	if p.IsSetDesc() {
		l += bthrift.Binary.FieldBeginLength("desc", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Desc)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Inner) field3Length() int {
	l := 0
	if p.IsSetMapOfList() {
		l += bthrift.Binary.FieldBeginLength("MapOfList", thrift.MAP, 3)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.LIST, len(p.MapOfList))
		for k, v := range p.MapOfList {

			l += bthrift.Binary.I64Length(k)

			l += bthrift.Binary.ListBeginLength(thrift.I64, len(v))
			var tmpV int64
			l += bthrift.Binary.I64Length(int64(tmpV)) * len(v)
			l += bthrift.Binary.ListEndLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Inner) field4Length() int {
	l := 0
	if p.IsSetMapOfEnumKey() {
		l += bthrift.Binary.FieldBeginLength("MapOfEnumKey", thrift.MAP, 4)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, len(p.MapOfEnumKey))
		for k, v := range p.MapOfEnumKey {

			l += bthrift.Binary.I32Length(int32(k))

			l += bthrift.Binary.I64Length(v)

		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Inner) field5Length() int {
	l := 0
	if p.IsSetByte1() {
		l += bthrift.Binary.FieldBeginLength("Byte1", thrift.BYTE, 5)
		l += bthrift.Binary.ByteLength(*p.Byte1)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Inner) field6Length() int {
	l := 0
	if p.IsSetDouble1() {
		l += bthrift.Binary.FieldBeginLength("Double1", thrift.DOUBLE, 6)
		l += bthrift.Binary.DoubleLength(*p.Double1)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Local) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, f, err2 := bthrift.ReadUnknownField(buf[offset:], name, fieldTypeId, fieldId)
			offset += l
			if err2 != nil {
				err = err2
				goto UnknownFieldsAppendError
			}
			p._unknownFields = append(p._unknownFields, f)
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Local[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return offset, thrift.PrependError(fmt.Sprintf("%T append unknown field(name: %s type: %d id: %d) error: ", p, name, fieldTypeId, fieldId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Local) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.L = v

	}
	return offset, nil
}

// for compatibility
func (p *Local) FastWrite(buf []byte) int {
	return 0
}

func (p *Local) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "Local")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		l, err := bthrift.WriteUnknownFields(buf[offset:], p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T write unknown field: %s", p, err))
		}
		offset += l
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *Local) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("Local")
	if p != nil {
		l += p.field1Length()
		unknownL, err := bthrift.UnknownFieldsLength(p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T unknown fields length: %s", p, err))
		}
		l += unknownL
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *Local) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "l", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.L)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Local) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("l", thrift.I32, 1)
	l += bthrift.Binary.I32Length(p.L)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLeft bool = false
	var issetRequiredIns bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetLeft = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRequiredIns = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField22(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField23(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField24(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField25(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField26(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField28(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, f, err2 := bthrift.ReadUnknownField(buf[offset:], name, fieldTypeId, fieldId)
			offset += l
			if err2 != nil {
				err = err2
				goto UnknownFieldsAppendError
			}
			p._unknownFields = append(p._unknownFields, f)
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetLeft {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRequiredIns {
		fieldId = 14
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FullStruct[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return offset, thrift.PrependError(fmt.Sprintf("%T append unknown field(name: %s type: %d id: %d) error: ", p, name, fieldTypeId, fieldId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FullStruct[fieldId]))
}

func (p *FullStruct) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Left = v

	}
	return offset, nil
}

func (p *FullStruct) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Right = v

	}
	return offset, nil
}

func (p *FullStruct) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Dummy = []byte(v)

	}
	return offset, nil
}

func (p *FullStruct) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := NewInner()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.InnerReq = tmp
	return offset, nil
}

func (p *FullStruct) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Status = HTTPStatus(v)

	}
	return offset, nil
}

func (p *FullStruct) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Str = v

	}
	return offset, nil
}

func (p *FullStruct) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.EnumList = make([]HTTPStatus, 0, size)
	for i := 0; i < size; i++ {
		var _elem HTTPStatus
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = HTTPStatus(v)

		}

		p.EnumList = append(p.EnumList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField8(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Strmap = make(map[int32]string, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.Strmap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Int64 = v

	}
	return offset, nil
}

func (p *FullStruct) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.IntList = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.IntList = append(p.IntList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField11(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.LocalList = make([]*Local, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLocal()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.LocalList = append(p.LocalList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField12(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.StrLocalMap = make(map[string]*Local, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := NewLocal()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.StrLocalMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.NestList = make([][]int32, 0, size)
	for i := 0; i < size; i++ {
		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_elem := make([]int32, 0, size)
		for i := 0; i < size; i++ {
			var _elem1 int32
			if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_elem1 = v

			}

			_elem = append(_elem, _elem1)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.NestList = append(p.NestList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField14(buf []byte) (int, error) {
	offset := 0

	tmp := NewLocal()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RequiredIns = tmp
	return offset, nil
}

func (p *FullStruct) FastReadField16(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.NestMap = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_elem = v

			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.NestMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField17(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.NestMap2 = make([]map[string]HTTPStatus, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_elem := make(map[string]HTTPStatus, size)
		for i := 0; i < size; i++ {
			var _key string
			if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_key = v

			}

			var _val HTTPStatus
			if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_val = HTTPStatus(v)

			}

			_elem[_key] = _val
		}
		if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.NestMap2 = append(p.NestMap2, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField18(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.EnumMap = make(map[int32]HTTPStatus, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val HTTPStatus
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = HTTPStatus(v)

		}

		p.EnumMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField19(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Strlist = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.Strlist = append(p.Strlist, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField20(buf []byte) (int, error) {
	offset := 0

	tmp := NewLocal()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.OptionalIns = tmp
	return offset, nil
}

func (p *FullStruct) FastReadField21(buf []byte) (int, error) {
	offset := 0

	tmp := NewInner()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.AnotherInner = tmp
	return offset, nil
}

func (p *FullStruct) FastReadField22(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.OptNilList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.OptNilList = append(p.OptNilList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField23(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.NilList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.NilList = append(p.NilList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField24(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.OptNilInsList = make([]*Inner, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewInner()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.OptNilInsList = append(p.OptNilInsList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField25(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.NilInsList = make([]*Inner, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewInner()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.NilInsList = append(p.NilInsList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField26(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := HTTPStatus(v)
		p.OptStatus = &tmp

	}
	return offset, nil
}

func (p *FullStruct) FastReadField27(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.EnumKeyMap = make(map[HTTPStatus]*Local, size)
	for i := 0; i < size; i++ {
		var _key HTTPStatus
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = HTTPStatus(v)

		}
		_val := NewLocal()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.EnumKeyMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *FullStruct) FastReadField28(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Complex = make(map[HTTPStatus][]map[string]*Local, size)
	for i := 0; i < size; i++ {
		var _key HTTPStatus
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = HTTPStatus(v)

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]map[string]*Local, 0, size)
		for i := 0; i < size; i++ {
			_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
			offset += l
			if err != nil {
				return offset, err
			}
			_elem := make(map[string]*Local, size)
			for i := 0; i < size; i++ {
				var _key1 string
				if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
					return offset, err
				} else {
					offset += l

					_key1 = v

				}
				_val1 := NewLocal()
				if l, err := _val1.FastRead(buf[offset:]); err != nil {
					return offset, err
				} else {
					offset += l
				}

				_elem[_key1] = _val1
			}
			if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l
			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Complex[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *FullStruct) FastWrite(buf []byte) int {
	return 0
}

func (p *FullStruct) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "FullStruct")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField22(buf[offset:], binaryWriter)
		offset += p.fastWriteField23(buf[offset:], binaryWriter)
		offset += p.fastWriteField24(buf[offset:], binaryWriter)
		offset += p.fastWriteField25(buf[offset:], binaryWriter)
		offset += p.fastWriteField26(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		offset += p.fastWriteField28(buf[offset:], binaryWriter)
		l, err := bthrift.WriteUnknownFields(buf[offset:], p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T write unknown field: %s", p, err))
		}
		offset += l
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *FullStruct) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("FullStruct")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field22Length()
		l += p.field23Length()
		l += p.field24Length()
		l += p.field25Length()
		l += p.field26Length()
		l += p.field27Length()
		l += p.field28Length()
		unknownL, err := bthrift.UnknownFieldsLength(p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T unknown fields length: %s", p, err))
		}
		l += unknownL
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *FullStruct) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Left", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.Left)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRight() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Right", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.Right)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Dummy", thrift.STRING, 3)
	offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.Dummy))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "InnerReq", thrift.STRUCT, 4)
	offset += p.InnerReq.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.I32, 5)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.Status))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Str", thrift.STRING, 6)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Str)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enum_list", thrift.LIST, 7)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
	var length int
	for _, v := range p.EnumList {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(v))

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStrmap() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Strmap", thrift.MAP, 8)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRING, 0)
		var length int
		for k, v := range p.Strmap {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRING, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Int64", thrift.I64, 9)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Int64)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIntList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "IntList", thrift.LIST, 10)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.IntList {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "localList", thrift.LIST, 11)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.LocalList {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "StrLocalMap", thrift.MAP, 12)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
	var length int
	for k, v := range p.StrLocalMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nestList", thrift.LIST, 13)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.LIST, 0)
	var length int
	for _, v := range p.NestList {
		length++
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range v {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.LIST, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "required_ins", thrift.STRUCT, 14)
	offset += p.RequiredIns.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nestMap", thrift.MAP, 16)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.LIST, 0)
	var length int
	for k, v := range p.NestMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
		var length int
		for _, v := range v {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.LIST, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nestMap2", thrift.LIST, 17)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.MAP, 0)
	var length int
	for _, v := range p.NestMap2 {
		length++
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.I32, 0)
		var length int
		for k, v := range v {
			length++

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

			offset += bthrift.Binary.WriteI32(buf[offset:], int32(v))

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.I32, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.MAP, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enum_map", thrift.MAP, 18)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
	var length int
	for k, v := range p.EnumMap {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], k)

		offset += bthrift.Binary.WriteI32(buf[offset:], int32(v))

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Strlist", thrift.LIST, 19)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
	var length int
	for _, v := range p.Strlist {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOptionalIns() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "optional_ins", thrift.STRUCT, 20)
		offset += p.OptionalIns.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "AnotherInner", thrift.STRUCT, 21)
	offset += p.AnotherInner.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField22(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOptNilList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "opt_nil_list", thrift.LIST, 22)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
		var length int
		for _, v := range p.OptNilList {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField23(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nil_list", thrift.LIST, 23)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
	var length int
	for _, v := range p.NilList {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField24(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOptNilInsList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "opt_nil_ins_list", thrift.LIST, 24)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.OptNilInsList {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField25(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nil_ins_list", thrift.LIST, 25)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.NilInsList {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField26(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOptStatus() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "opt_status", thrift.I32, 26)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.OptStatus))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *FullStruct) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enum_key_map", thrift.MAP, 27)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, 0)
	var length int
	for k, v := range p.EnumKeyMap {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], int32(k))

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) fastWriteField28(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "complex", thrift.MAP, 28)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, 0)
	var length int
	for k, v := range p.Complex {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], int32(k))

		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.MAP, 0)
		var length int
		for _, v := range v {
			length++
			mapBeginOffset := offset
			offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
			var length int
			for k, v := range v {
				length++

				offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

				offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
			}
			bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
			offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.MAP, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.LIST, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *FullStruct) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Left", thrift.I32, 1)
	l += bthrift.Binary.I32Length(p.Left)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field2Length() int {
	l := 0
	if p.IsSetRight() {
		l += bthrift.Binary.FieldBeginLength("Right", thrift.I32, 2)
		l += bthrift.Binary.I32Length(p.Right)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Dummy", thrift.STRING, 3)
	l += bthrift.Binary.BinaryLengthNocopy([]byte(p.Dummy))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("InnerReq", thrift.STRUCT, 4)
	l += p.InnerReq.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.I32, 5)
	l += bthrift.Binary.I32Length(int32(p.Status))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Str", thrift.STRING, 6)
	l += bthrift.Binary.StringLengthNocopy(p.Str)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("enum_list", thrift.LIST, 7)
	l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.EnumList))
	for _, v := range p.EnumList {
		l += bthrift.Binary.I32Length(int32(v))

	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field8Length() int {
	l := 0
	if p.IsSetStrmap() {
		l += bthrift.Binary.FieldBeginLength("Strmap", thrift.MAP, 8)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRING, len(p.Strmap))
		for k, v := range p.Strmap {

			l += bthrift.Binary.I32Length(k)

			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field9Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Int64", thrift.I64, 9)
	l += bthrift.Binary.I64Length(p.Int64)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field10Length() int {
	l := 0
	if p.IsSetIntList() {
		l += bthrift.Binary.FieldBeginLength("IntList", thrift.LIST, 10)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.IntList))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.IntList)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field11Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("localList", thrift.LIST, 11)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.LocalList))
	for _, v := range p.LocalList {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field12Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("StrLocalMap", thrift.MAP, 12)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.StrLocalMap))
	for k, v := range p.StrLocalMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field13Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("nestList", thrift.LIST, 13)
	l += bthrift.Binary.ListBeginLength(thrift.LIST, len(p.NestList))
	for _, v := range p.NestList {
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(v))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(v)
		l += bthrift.Binary.ListEndLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field14Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("required_ins", thrift.STRUCT, 14)
	l += p.RequiredIns.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field16Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("nestMap", thrift.MAP, 16)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.LIST, len(p.NestMap))
	for k, v := range p.NestMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.ListBeginLength(thrift.STRING, len(v))
		for _, v := range v {
			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.ListEndLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field17Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("nestMap2", thrift.LIST, 17)
	l += bthrift.Binary.ListBeginLength(thrift.MAP, len(p.NestMap2))
	for _, v := range p.NestMap2 {
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.I32, len(v))
		for k, v := range v {

			l += bthrift.Binary.StringLengthNocopy(k)

			l += bthrift.Binary.I32Length(int32(v))

		}
		l += bthrift.Binary.MapEndLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field18Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("enum_map", thrift.MAP, 18)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.EnumMap))
	for k, v := range p.EnumMap {

		l += bthrift.Binary.I32Length(k)

		l += bthrift.Binary.I32Length(int32(v))

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field19Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Strlist", thrift.LIST, 19)
	l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.Strlist))
	for _, v := range p.Strlist {
		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field20Length() int {
	l := 0
	if p.IsSetOptionalIns() {
		l += bthrift.Binary.FieldBeginLength("optional_ins", thrift.STRUCT, 20)
		l += p.OptionalIns.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field21Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("AnotherInner", thrift.STRUCT, 21)
	l += p.AnotherInner.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field22Length() int {
	l := 0
	if p.IsSetOptNilList() {
		l += bthrift.Binary.FieldBeginLength("opt_nil_list", thrift.LIST, 22)
		l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.OptNilList))
		for _, v := range p.OptNilList {
			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field23Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("nil_list", thrift.LIST, 23)
	l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.NilList))
	for _, v := range p.NilList {
		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field24Length() int {
	l := 0
	if p.IsSetOptNilInsList() {
		l += bthrift.Binary.FieldBeginLength("opt_nil_ins_list", thrift.LIST, 24)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.OptNilInsList))
		for _, v := range p.OptNilInsList {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field25Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("nil_ins_list", thrift.LIST, 25)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.NilInsList))
	for _, v := range p.NilInsList {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field26Length() int {
	l := 0
	if p.IsSetOptStatus() {
		l += bthrift.Binary.FieldBeginLength("opt_status", thrift.I32, 26)
		l += bthrift.Binary.I32Length(int32(*p.OptStatus))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *FullStruct) field27Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("enum_key_map", thrift.MAP, 27)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, len(p.EnumKeyMap))
	for k, v := range p.EnumKeyMap {

		l += bthrift.Binary.I32Length(int32(k))

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *FullStruct) field28Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("complex", thrift.MAP, 28)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, len(p.Complex))
	for k, v := range p.Complex {

		l += bthrift.Binary.I32Length(int32(k))

		l += bthrift.Binary.ListBeginLength(thrift.MAP, len(v))
		for _, v := range v {
			l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(v))
			for k, v := range v {

				l += bthrift.Binary.StringLengthNocopy(k)

				l += v.BLength()
			}
			l += bthrift.Binary.MapEndLength()
		}
		l += bthrift.Binary.ListEndLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLeft bool = false
	var issetRequiredIns bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetLeft = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRequiredIns = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, f, err2 := bthrift.ReadUnknownField(buf[offset:], name, fieldTypeId, fieldId)
			offset += l
			if err2 != nil {
				err = err2
				goto UnknownFieldsAppendError
			}
			p._unknownFields = append(p._unknownFields, f)
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetLeft {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRequiredIns {
		fieldId = 14
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MixedStruct[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return offset, thrift.PrependError(fmt.Sprintf("%T append unknown field(name: %s type: %d id: %d) error: ", p, name, fieldTypeId, fieldId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MixedStruct[fieldId]))
}

func (p *MixedStruct) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Left = v

	}
	return offset, nil
}

func (p *MixedStruct) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Dummy = []byte(v)

	}
	return offset, nil
}

func (p *MixedStruct) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Str = v

	}
	return offset, nil
}

func (p *MixedStruct) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.EnumList = make([]HTTPStatus, 0, size)
	for i := 0; i < size; i++ {
		var _elem HTTPStatus
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = HTTPStatus(v)

		}

		p.EnumList = append(p.EnumList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *MixedStruct) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Int64 = v

	}
	return offset, nil
}

func (p *MixedStruct) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.IntList = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.IntList = append(p.IntList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *MixedStruct) FastReadField11(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.LocalList = make([]*Local, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLocal()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.LocalList = append(p.LocalList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *MixedStruct) FastReadField12(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.StrLocalMap = make(map[string]*Local, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := NewLocal()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.StrLocalMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *MixedStruct) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.NestList = make([][]int32, 0, size)
	for i := 0; i < size; i++ {
		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_elem := make([]int32, 0, size)
		for i := 0; i < size; i++ {
			var _elem1 int32
			if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_elem1 = v

			}

			_elem = append(_elem, _elem1)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.NestList = append(p.NestList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *MixedStruct) FastReadField14(buf []byte) (int, error) {
	offset := 0

	tmp := NewLocal()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RequiredIns = tmp
	return offset, nil
}

func (p *MixedStruct) FastReadField20(buf []byte) (int, error) {
	offset := 0

	tmp := NewLocal()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.OptionalIns = tmp
	return offset, nil
}

func (p *MixedStruct) FastReadField21(buf []byte) (int, error) {
	offset := 0

	tmp := NewInner()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.AnotherInner = tmp
	return offset, nil
}

func (p *MixedStruct) FastReadField27(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.EnumKeyMap = make(map[HTTPStatus]*Local, size)
	for i := 0; i < size; i++ {
		var _key HTTPStatus
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = HTTPStatus(v)

		}
		_val := NewLocal()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.EnumKeyMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *MixedStruct) FastWrite(buf []byte) int {
	return 0
}

func (p *MixedStruct) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "MixedStruct")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		l, err := bthrift.WriteUnknownFields(buf[offset:], p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T write unknown field: %s", p, err))
		}
		offset += l
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("MixedStruct")
	if p != nil {
		l += p.field1Length()
		l += p.field3Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field27Length()
		unknownL, err := bthrift.UnknownFieldsLength(p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T unknown fields length: %s", p, err))
		}
		l += unknownL
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *MixedStruct) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Left", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.Left)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Dummy", thrift.STRING, 3)
	offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.Dummy))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Str", thrift.STRING, 6)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Str)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enum_list", thrift.LIST, 7)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
	var length int
	for _, v := range p.EnumList {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(v))

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Int64", thrift.I64, 9)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Int64)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIntList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "IntList", thrift.LIST, 10)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.IntList {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *MixedStruct) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "localList", thrift.LIST, 11)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.LocalList {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "StrLocalMap", thrift.MAP, 12)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
	var length int
	for k, v := range p.StrLocalMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nestList", thrift.LIST, 13)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.LIST, 0)
	var length int
	for _, v := range p.NestList {
		length++
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range v {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.LIST, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "required_ins", thrift.STRUCT, 14)
	offset += p.RequiredIns.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOptionalIns() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "optional_ins", thrift.STRUCT, 20)
		offset += p.OptionalIns.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *MixedStruct) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "AnotherInner", thrift.STRUCT, 21)
	offset += p.AnotherInner.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enum_key_map", thrift.MAP, 27)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, 0)
	var length int
	for k, v := range p.EnumKeyMap {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], int32(k))

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *MixedStruct) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Left", thrift.I32, 1)
	l += bthrift.Binary.I32Length(p.Left)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Dummy", thrift.STRING, 3)
	l += bthrift.Binary.BinaryLengthNocopy([]byte(p.Dummy))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Str", thrift.STRING, 6)
	l += bthrift.Binary.StringLengthNocopy(p.Str)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("enum_list", thrift.LIST, 7)
	l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.EnumList))
	for _, v := range p.EnumList {
		l += bthrift.Binary.I32Length(int32(v))

	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field9Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Int64", thrift.I64, 9)
	l += bthrift.Binary.I64Length(p.Int64)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field10Length() int {
	l := 0
	if p.IsSetIntList() {
		l += bthrift.Binary.FieldBeginLength("IntList", thrift.LIST, 10)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.IntList))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.IntList)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *MixedStruct) field11Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("localList", thrift.LIST, 11)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.LocalList))
	for _, v := range p.LocalList {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field12Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("StrLocalMap", thrift.MAP, 12)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.StrLocalMap))
	for k, v := range p.StrLocalMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field13Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("nestList", thrift.LIST, 13)
	l += bthrift.Binary.ListBeginLength(thrift.LIST, len(p.NestList))
	for _, v := range p.NestList {
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(v))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(v)
		l += bthrift.Binary.ListEndLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field14Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("required_ins", thrift.STRUCT, 14)
	l += p.RequiredIns.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field20Length() int {
	l := 0
	if p.IsSetOptionalIns() {
		l += bthrift.Binary.FieldBeginLength("optional_ins", thrift.STRUCT, 20)
		l += p.OptionalIns.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *MixedStruct) field21Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("AnotherInner", thrift.STRUCT, 21)
	l += p.AnotherInner.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *MixedStruct) field27Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("enum_key_map", thrift.MAP, 27)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, len(p.EnumKeyMap))
	for k, v := range p.EnumKeyMap {

		l += bthrift.Binary.I32Length(int32(k))

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *EmptyStruct) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		l, f, err := bthrift.ReadUnknownField(buf[offset:], name, fieldTypeId, fieldId)
		offset += l
		if err != nil {
			goto UnknownFieldsAppendError
		}
		p._unknownFields = append(p._unknownFields, f)

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)

UnknownFieldsAppendError:
	return offset, thrift.PrependError(fmt.Sprintf("%T append unknown field(name: %s type: %d id: %d) error: ", p, name, fieldTypeId, fieldId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

// for compatibility
func (p *EmptyStruct) FastWrite(buf []byte) int {
	return 0
}

func (p *EmptyStruct) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "EmptyStruct")
	if p != nil {
		l, err := bthrift.WriteUnknownFields(buf[offset:], p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T write unknown field: %s", p, err))
		}
		offset += l
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *EmptyStruct) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("EmptyStruct")
	if p != nil {
		unknownL, err := bthrift.UnknownFieldsLength(p._unknownFields)
		if err != nil {
			panic(fmt.Errorf("%T unknown fields length: %s", p, err))
		}
		l += unknownL
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}
