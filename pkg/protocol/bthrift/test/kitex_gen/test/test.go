// Code generated by thriftgo (0.2.8). DO NOT EDIT.

package test

import (
	"bytes"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/generator/golang/extension/unknown"
	"strings"
)

type AEnum int64

const (
	AEnum_A AEnum = 1
	AEnum_B AEnum = 2
)

func (p AEnum) String() string {
	switch p {
	case AEnum_A:
		return "A"
	case AEnum_B:
		return "B"
	}
	return "<UNSET>"
}

func AEnumFromString(s string) (AEnum, error) {
	switch s {
	case "A":
		return AEnum_A, nil
	case "B":
		return AEnum_B, nil
	}
	return AEnum(0), fmt.Errorf("not a valid AEnum string")
}

func AEnumPtr(v AEnum) *AEnum { return &v }
func (p *AEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = AEnum(result.Int64)
	return
}

func (p *AEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type HTTPStatus int64

const (
	HTTPStatus_OK        HTTPStatus = 200
	HTTPStatus_NOT_FOUND HTTPStatus = 404
)

func (p HTTPStatus) String() string {
	switch p {
	case HTTPStatus_OK:
		return "OK"
	case HTTPStatus_NOT_FOUND:
		return "NOT_FOUND"
	}
	return "<UNSET>"
}

func HTTPStatusFromString(s string) (HTTPStatus, error) {
	switch s {
	case "OK":
		return HTTPStatus_OK, nil
	case "NOT_FOUND":
		return HTTPStatus_NOT_FOUND, nil
	}
	return HTTPStatus(0), fmt.Errorf("not a valid HTTPStatus string")
}

func HTTPStatusPtr(v HTTPStatus) *HTTPStatus { return &v }
func (p *HTTPStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = HTTPStatus(result.Int64)
	return
}

func (p *HTTPStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Inner struct {
	Num            int32             `thrift:"Num,1,optional" frugal:"1,optional,i32" json:"Num,omitempty"`
	Desc           *string           `thrift:"desc,2,optional" frugal:"2,optional,string" json:"desc,omitempty"`
	MapOfList      map[int64][]int64 `thrift:"MapOfList,3,optional" frugal:"3,optional,map<i64:list<i64>>" json:"MapOfList,omitempty"`
	MapOfEnumKey   map[AEnum]int64   `thrift:"MapOfEnumKey,4,optional" frugal:"4,optional,map<AEnum:i64>" json:"MapOfEnumKey,omitempty"`
	Byte1          *int8             `thrift:"Byte1,5,optional" frugal:"5,optional,byte" json:"Byte1,omitempty"`
	Double1        *float64          `thrift:"Double1,6,optional" frugal:"6,optional,double" json:"Double1,omitempty"`
	_unknownFields unknown.Fields
}

func NewInner() *Inner {
	return &Inner{

		Num: 5,
	}
}

func (p *Inner) InitDefault() {
	*p = Inner{

		Num: 5,
	}
}

var Inner_Num_DEFAULT int32 = 5

func (p *Inner) GetNum() (v int32) {
	if !p.IsSetNum() {
		return Inner_Num_DEFAULT
	}
	return p.Num
}

var Inner_Desc_DEFAULT string

func (p *Inner) GetDesc() (v string) {
	if !p.IsSetDesc() {
		return Inner_Desc_DEFAULT
	}
	return *p.Desc
}

var Inner_MapOfList_DEFAULT map[int64][]int64

func (p *Inner) GetMapOfList() (v map[int64][]int64) {
	if !p.IsSetMapOfList() {
		return Inner_MapOfList_DEFAULT
	}
	return p.MapOfList
}

var Inner_MapOfEnumKey_DEFAULT map[AEnum]int64

func (p *Inner) GetMapOfEnumKey() (v map[AEnum]int64) {
	if !p.IsSetMapOfEnumKey() {
		return Inner_MapOfEnumKey_DEFAULT
	}
	return p.MapOfEnumKey
}

var Inner_Byte1_DEFAULT int8

func (p *Inner) GetByte1() (v int8) {
	if !p.IsSetByte1() {
		return Inner_Byte1_DEFAULT
	}
	return *p.Byte1
}

var Inner_Double1_DEFAULT float64

func (p *Inner) GetDouble1() (v float64) {
	if !p.IsSetDouble1() {
		return Inner_Double1_DEFAULT
	}
	return *p.Double1
}
func (p *Inner) SetNum(val int32) {
	p.Num = val
}
func (p *Inner) SetDesc(val *string) {
	p.Desc = val
}
func (p *Inner) SetMapOfList(val map[int64][]int64) {
	p.MapOfList = val
}
func (p *Inner) SetMapOfEnumKey(val map[AEnum]int64) {
	p.MapOfEnumKey = val
}
func (p *Inner) SetByte1(val *int8) {
	p.Byte1 = val
}
func (p *Inner) SetDouble1(val *float64) {
	p.Double1 = val
}

func (p *Inner) CarryingUnknownFields() bool {
	return len(p._unknownFields) > 0
}

var fieldIDToName_Inner = map[int16]string{
	1: "Num",
	2: "desc",
	3: "MapOfList",
	4: "MapOfEnumKey",
	5: "Byte1",
	6: "Double1",
}

func (p *Inner) IsSetNum() bool {
	return p.Num != Inner_Num_DEFAULT
}

func (p *Inner) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *Inner) IsSetMapOfList() bool {
	return p.MapOfList != nil
}

func (p *Inner) IsSetMapOfEnumKey() bool {
	return p.MapOfEnumKey != nil
}

func (p *Inner) IsSetByte1() bool {
	return p.Byte1 != nil
}

func (p *Inner) IsSetDouble1() bool {
	return p.Double1 != nil
}

func (p *Inner) Read(iprot thrift.TProtocol) (err error) {
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = p._unknownFields.Append(iprot, name, fieldTypeId, fieldId); err != nil {
				goto UnknownFieldsAppendError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Inner[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return thrift.PrependError(fmt.Sprintf("%T append unknown field(name:%s type:%d id:%d) error: ", p, name, fieldTypeId, fieldId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Inner) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *Inner) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *Inner) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapOfList = make(map[int64][]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.MapOfList[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Inner) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.MapOfEnumKey = make(map[AEnum]int64, size)
	for i := 0; i < size; i++ {
		var _key AEnum
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = AEnum(v)
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		p.MapOfEnumKey[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Inner) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Byte1 = &v
	}
	return nil
}

func (p *Inner) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Double1 = &v
	}
	return nil
}

func (p *Inner) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Inner"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

		if err = p._unknownFields.Write(oprot); err != nil {
			goto UnknownFieldsWriteError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
UnknownFieldsWriteError:
	return thrift.PrependError(fmt.Sprintf("%T write unknown fields error: ", p), err)
}

func (p *Inner) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err = oprot.WriteFieldBegin("Num", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Num); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Inner) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Inner) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapOfList() {
		if err = oprot.WriteFieldBegin("MapOfList", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.MapOfList)); err != nil {
			return err
		}
		for k, v := range p.MapOfList {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteI64(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Inner) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapOfEnumKey() {
		if err = oprot.WriteFieldBegin("MapOfEnumKey", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.MapOfEnumKey)); err != nil {
			return err
		}
		for k, v := range p.MapOfEnumKey {

			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}

			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Inner) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetByte1() {
		if err = oprot.WriteFieldBegin("Byte1", thrift.BYTE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Byte1); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Inner) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDouble1() {
		if err = oprot.WriteFieldBegin("Double1", thrift.DOUBLE, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Double1); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Inner) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Inner(%+v)", *p)
}

func (p *Inner) DeepEqual(ano *Inner) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Num) {
		return false
	}
	if !p.Field2DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field3DeepEqual(ano.MapOfList) {
		return false
	}
	if !p.Field4DeepEqual(ano.MapOfEnumKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.Byte1) {
		return false
	}
	if !p.Field6DeepEqual(ano.Double1) {
		return false
	}
	return true
}

func (p *Inner) Field1DeepEqual(src int32) bool {

	if p.Num != src {
		return false
	}
	return true
}
func (p *Inner) Field2DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *Inner) Field3DeepEqual(src map[int64][]int64) bool {

	if len(p.MapOfList) != len(src) {
		return false
	}
	for k, v := range p.MapOfList {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *Inner) Field4DeepEqual(src map[AEnum]int64) bool {

	if len(p.MapOfEnumKey) != len(src) {
		return false
	}
	for k, v := range p.MapOfEnumKey {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Inner) Field5DeepEqual(src *int8) bool {

	if p.Byte1 == src {
		return true
	} else if p.Byte1 == nil || src == nil {
		return false
	}
	if *p.Byte1 != *src {
		return false
	}
	return true
}
func (p *Inner) Field6DeepEqual(src *float64) bool {

	if p.Double1 == src {
		return true
	} else if p.Double1 == nil || src == nil {
		return false
	}
	if *p.Double1 != *src {
		return false
	}
	return true
}

type Local struct {
	L              int32 `thrift:"l,1" frugal:"1,default,i32" json:"l"`
	_unknownFields unknown.Fields
}

func NewLocal() *Local {
	return &Local{}
}

func (p *Local) InitDefault() {
	*p = Local{}
}

func (p *Local) GetL() (v int32) {
	return p.L
}
func (p *Local) SetL(val int32) {
	p.L = val
}

func (p *Local) CarryingUnknownFields() bool {
	return len(p._unknownFields) > 0
}

var fieldIDToName_Local = map[int16]string{
	1: "l",
}

func (p *Local) Read(iprot thrift.TProtocol) (err error) {
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = p._unknownFields.Append(iprot, name, fieldTypeId, fieldId); err != nil {
				goto UnknownFieldsAppendError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Local[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return thrift.PrependError(fmt.Sprintf("%T append unknown field(name:%s type:%d id:%d) error: ", p, name, fieldTypeId, fieldId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Local) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.L = v
	}
	return nil
}

func (p *Local) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("local"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

		if err = p._unknownFields.Write(oprot); err != nil {
			goto UnknownFieldsWriteError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
UnknownFieldsWriteError:
	return thrift.PrependError(fmt.Sprintf("%T write unknown fields error: ", p), err)
}

func (p *Local) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("l", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.L); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Local) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Local(%+v)", *p)
}

func (p *Local) DeepEqual(ano *Local) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.L) {
		return false
	}
	return true
}

func (p *Local) Field1DeepEqual(src int32) bool {

	if p.L != src {
		return false
	}
	return true
}

type Local2 struct {
	L1             *Local `thrift:"l1,1,optional" frugal:"1,optional,Local" json:"l1,omitempty"`
	_unknownFields unknown.Fields
}

func NewLocal2() *Local2 {
	return &Local2{}
}

func (p *Local2) InitDefault() {
	*p = Local2{}
}

var Local2_L1_DEFAULT *Local

func (p *Local2) GetL1() (v *Local) {
	if !p.IsSetL1() {
		return Local2_L1_DEFAULT
	}
	return p.L1
}
func (p *Local2) SetL1(val *Local) {
	p.L1 = val
}

func (p *Local2) CarryingUnknownFields() bool {
	return len(p._unknownFields) > 0
}

var fieldIDToName_Local2 = map[int16]string{
	1: "l1",
}

func (p *Local2) IsSetL1() bool {
	return p.L1 != nil
}

func (p *Local2) Read(iprot thrift.TProtocol) (err error) {
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = p._unknownFields.Append(iprot, name, fieldTypeId, fieldId); err != nil {
				goto UnknownFieldsAppendError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Local2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return thrift.PrependError(fmt.Sprintf("%T append unknown field(name:%s type:%d id:%d) error: ", p, name, fieldTypeId, fieldId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Local2) ReadField1(iprot thrift.TProtocol) error {
	p.L1 = NewLocal()
	if err := p.L1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Local2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("local2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

		if err = p._unknownFields.Write(oprot); err != nil {
			goto UnknownFieldsWriteError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
UnknownFieldsWriteError:
	return thrift.PrependError(fmt.Sprintf("%T write unknown fields error: ", p), err)
}

func (p *Local2) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetL1() {
		if err = oprot.WriteFieldBegin("l1", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.L1.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Local2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Local2(%+v)", *p)
}

func (p *Local2) DeepEqual(ano *Local2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.L1) {
		return false
	}
	return true
}

func (p *Local2) Field1DeepEqual(src *Local) bool {

	if !p.L1.DeepEqual(src) {
		return false
	}
	return true
}

type TestStruct struct {
	Left           int32                              `thrift:"Left,1,required" frugal:"1,required,i32" json:"Left"`
	Right          int32                              `thrift:"Right,2,optional" frugal:"2,optional,i32" json:"Right,omitempty"`
	Dummy          []byte                             `thrift:"Dummy,3" frugal:"3,default,binary" json:"Dummy"`
	InnerReq       *Inner                             `thrift:"InnerReq,4" frugal:"4,default,Inner" json:"InnerReq"`
	Status         HTTPStatus                         `thrift:"status,5" frugal:"5,default,HTTPStatus" json:"status"`
	Str            string                             `thrift:"Str,6" frugal:"6,default,string" json:"Str"`
	EnumList       []HTTPStatus                       `thrift:"enum_list,7" frugal:"7,default,list<HTTPStatus>" json:"enum_list"`
	Strmap         map[int32]string                   `thrift:"Strmap,8,optional" frugal:"8,optional,map<i32:string>" json:"Strmap,omitempty"`
	Int64          int64                              `thrift:"Int64,9" frugal:"9,default,i64" json:"Int64"`
	IntList        []int32                            `thrift:"IntList,10,optional" frugal:"10,optional,list<i32>" json:"IntList,omitempty"`
	LocalList      []*Local                           `thrift:"localList,11" frugal:"11,default,list<Local>" json:"localList"`
	StrLocalMap    map[string]*Local                  `thrift:"StrLocalMap,12" frugal:"12,default,map<string:Local>" json:"StrLocalMap"`
	NestList       [][]int32                          `thrift:"nestList,13" frugal:"13,default,list<list<i32>>" json:"nestList"`
	RequiredIns    *Local                             `thrift:"required_ins,14,required" frugal:"14,required,Local" json:"required_ins"`
	NestMap        map[string][]string                `thrift:"nestMap,16" frugal:"16,default,map<string:list<string>>" json:"nestMap"`
	NestMap2       []map[string]HTTPStatus            `thrift:"nestMap2,17" frugal:"17,default,list<map<string:HTTPStatus>>" json:"nestMap2"`
	EnumMap        map[int32]HTTPStatus               `thrift:"enum_map,18" frugal:"18,default,map<i32:HTTPStatus>" json:"enum_map"`
	Strlist        []string                           `thrift:"Strlist,19" frugal:"19,default,list<string>" json:"Strlist"`
	OptionalIns    *Local                             `thrift:"optional_ins,20,optional" frugal:"20,optional,Local" json:"optional_ins,omitempty"`
	AnotherInner   *Inner                             `thrift:"AnotherInner,21" frugal:"21,default,Inner" json:"AnotherInner"`
	OptNilList     []string                           `thrift:"opt_nil_list,22,optional" frugal:"22,optional,list<string>" json:"opt_nil_list,omitempty"`
	NilList        []string                           `thrift:"nil_list,23" frugal:"23,default,list<string>" json:"nil_list"`
	OptNilInsList  []*Inner                           `thrift:"opt_nil_ins_list,24,optional" frugal:"24,optional,list<Inner>" json:"opt_nil_ins_list,omitempty"`
	NilInsList     []*Inner                           `thrift:"nil_ins_list,25" frugal:"25,default,list<Inner>" json:"nil_ins_list"`
	OptStatus      *HTTPStatus                        `thrift:"opt_status,26,optional" frugal:"26,optional,HTTPStatus" json:"opt_status,omitempty"`
	EnumKeyMap     map[HTTPStatus]*Local              `thrift:"enum_key_map,27" frugal:"27,default,map<HTTPStatus:Local>" json:"enum_key_map"`
	Complex        map[HTTPStatus][]map[string]*Local `thrift:"complex,28" frugal:"28,default,map<HTTPStatus:list<map<string:Local>>>" json:"complex"`
	_unknownFields unknown.Fields
}

func NewTestStruct() *TestStruct {
	return &TestStruct{

		Right: 3,
	}
}

func (p *TestStruct) InitDefault() {
	*p = TestStruct{

		Right: 3,
	}
}

func (p *TestStruct) GetLeft() (v int32) {
	return p.Left
}

var TestStruct_Right_DEFAULT int32 = 3

func (p *TestStruct) GetRight() (v int32) {
	if !p.IsSetRight() {
		return TestStruct_Right_DEFAULT
	}
	return p.Right
}

func (p *TestStruct) GetDummy() (v []byte) {
	return p.Dummy
}

var TestStruct_InnerReq_DEFAULT *Inner

func (p *TestStruct) GetInnerReq() (v *Inner) {
	if !p.IsSetInnerReq() {
		return TestStruct_InnerReq_DEFAULT
	}
	return p.InnerReq
}

func (p *TestStruct) GetStatus() (v HTTPStatus) {
	return p.Status
}

func (p *TestStruct) GetStr() (v string) {
	return p.Str
}

func (p *TestStruct) GetEnumList() (v []HTTPStatus) {
	return p.EnumList
}

var TestStruct_Strmap_DEFAULT map[int32]string

func (p *TestStruct) GetStrmap() (v map[int32]string) {
	if !p.IsSetStrmap() {
		return TestStruct_Strmap_DEFAULT
	}
	return p.Strmap
}

func (p *TestStruct) GetInt64() (v int64) {
	return p.Int64
}

var TestStruct_IntList_DEFAULT []int32

func (p *TestStruct) GetIntList() (v []int32) {
	if !p.IsSetIntList() {
		return TestStruct_IntList_DEFAULT
	}
	return p.IntList
}

func (p *TestStruct) GetLocalList() (v []*Local) {
	return p.LocalList
}

func (p *TestStruct) GetStrLocalMap() (v map[string]*Local) {
	return p.StrLocalMap
}

func (p *TestStruct) GetNestList() (v [][]int32) {
	return p.NestList
}

var TestStruct_RequiredIns_DEFAULT *Local

func (p *TestStruct) GetRequiredIns() (v *Local) {
	if !p.IsSetRequiredIns() {
		return TestStruct_RequiredIns_DEFAULT
	}
	return p.RequiredIns
}

func (p *TestStruct) GetNestMap() (v map[string][]string) {
	return p.NestMap
}

func (p *TestStruct) GetNestMap2() (v []map[string]HTTPStatus) {
	return p.NestMap2
}

func (p *TestStruct) GetEnumMap() (v map[int32]HTTPStatus) {
	return p.EnumMap
}

func (p *TestStruct) GetStrlist() (v []string) {
	return p.Strlist
}

var TestStruct_OptionalIns_DEFAULT *Local

func (p *TestStruct) GetOptionalIns() (v *Local) {
	if !p.IsSetOptionalIns() {
		return TestStruct_OptionalIns_DEFAULT
	}
	return p.OptionalIns
}

var TestStruct_AnotherInner_DEFAULT *Inner

func (p *TestStruct) GetAnotherInner() (v *Inner) {
	if !p.IsSetAnotherInner() {
		return TestStruct_AnotherInner_DEFAULT
	}
	return p.AnotherInner
}

var TestStruct_OptNilList_DEFAULT []string

func (p *TestStruct) GetOptNilList() (v []string) {
	if !p.IsSetOptNilList() {
		return TestStruct_OptNilList_DEFAULT
	}
	return p.OptNilList
}

func (p *TestStruct) GetNilList() (v []string) {
	return p.NilList
}

var TestStruct_OptNilInsList_DEFAULT []*Inner

func (p *TestStruct) GetOptNilInsList() (v []*Inner) {
	if !p.IsSetOptNilInsList() {
		return TestStruct_OptNilInsList_DEFAULT
	}
	return p.OptNilInsList
}

func (p *TestStruct) GetNilInsList() (v []*Inner) {
	return p.NilInsList
}

var TestStruct_OptStatus_DEFAULT HTTPStatus

func (p *TestStruct) GetOptStatus() (v HTTPStatus) {
	if !p.IsSetOptStatus() {
		return TestStruct_OptStatus_DEFAULT
	}
	return *p.OptStatus
}

func (p *TestStruct) GetEnumKeyMap() (v map[HTTPStatus]*Local) {
	return p.EnumKeyMap
}

func (p *TestStruct) GetComplex() (v map[HTTPStatus][]map[string]*Local) {
	return p.Complex
}
func (p *TestStruct) SetLeft(val int32) {
	p.Left = val
}
func (p *TestStruct) SetRight(val int32) {
	p.Right = val
}
func (p *TestStruct) SetDummy(val []byte) {
	p.Dummy = val
}
func (p *TestStruct) SetInnerReq(val *Inner) {
	p.InnerReq = val
}
func (p *TestStruct) SetStatus(val HTTPStatus) {
	p.Status = val
}
func (p *TestStruct) SetStr(val string) {
	p.Str = val
}
func (p *TestStruct) SetEnumList(val []HTTPStatus) {
	p.EnumList = val
}
func (p *TestStruct) SetStrmap(val map[int32]string) {
	p.Strmap = val
}
func (p *TestStruct) SetInt64(val int64) {
	p.Int64 = val
}
func (p *TestStruct) SetIntList(val []int32) {
	p.IntList = val
}
func (p *TestStruct) SetLocalList(val []*Local) {
	p.LocalList = val
}
func (p *TestStruct) SetStrLocalMap(val map[string]*Local) {
	p.StrLocalMap = val
}
func (p *TestStruct) SetNestList(val [][]int32) {
	p.NestList = val
}
func (p *TestStruct) SetRequiredIns(val *Local) {
	p.RequiredIns = val
}
func (p *TestStruct) SetNestMap(val map[string][]string) {
	p.NestMap = val
}
func (p *TestStruct) SetNestMap2(val []map[string]HTTPStatus) {
	p.NestMap2 = val
}
func (p *TestStruct) SetEnumMap(val map[int32]HTTPStatus) {
	p.EnumMap = val
}
func (p *TestStruct) SetStrlist(val []string) {
	p.Strlist = val
}
func (p *TestStruct) SetOptionalIns(val *Local) {
	p.OptionalIns = val
}
func (p *TestStruct) SetAnotherInner(val *Inner) {
	p.AnotherInner = val
}
func (p *TestStruct) SetOptNilList(val []string) {
	p.OptNilList = val
}
func (p *TestStruct) SetNilList(val []string) {
	p.NilList = val
}
func (p *TestStruct) SetOptNilInsList(val []*Inner) {
	p.OptNilInsList = val
}
func (p *TestStruct) SetNilInsList(val []*Inner) {
	p.NilInsList = val
}
func (p *TestStruct) SetOptStatus(val *HTTPStatus) {
	p.OptStatus = val
}
func (p *TestStruct) SetEnumKeyMap(val map[HTTPStatus]*Local) {
	p.EnumKeyMap = val
}
func (p *TestStruct) SetComplex(val map[HTTPStatus][]map[string]*Local) {
	p.Complex = val
}

func (p *TestStruct) CarryingUnknownFields() bool {
	return len(p._unknownFields) > 0
}

var fieldIDToName_TestStruct = map[int16]string{
	1:  "Left",
	2:  "Right",
	3:  "Dummy",
	4:  "InnerReq",
	5:  "status",
	6:  "Str",
	7:  "enum_list",
	8:  "Strmap",
	9:  "Int64",
	10: "IntList",
	11: "localList",
	12: "StrLocalMap",
	13: "nestList",
	14: "required_ins",
	16: "nestMap",
	17: "nestMap2",
	18: "enum_map",
	19: "Strlist",
	20: "optional_ins",
	21: "AnotherInner",
	22: "opt_nil_list",
	23: "nil_list",
	24: "opt_nil_ins_list",
	25: "nil_ins_list",
	26: "opt_status",
	27: "enum_key_map",
	28: "complex",
}

func (p *TestStruct) IsSetRight() bool {
	return p.Right != TestStruct_Right_DEFAULT
}

func (p *TestStruct) IsSetInnerReq() bool {
	return p.InnerReq != nil
}

func (p *TestStruct) IsSetStrmap() bool {
	return p.Strmap != nil
}

func (p *TestStruct) IsSetIntList() bool {
	return p.IntList != nil
}

func (p *TestStruct) IsSetRequiredIns() bool {
	return p.RequiredIns != nil
}

func (p *TestStruct) IsSetOptionalIns() bool {
	return p.OptionalIns != nil
}

func (p *TestStruct) IsSetAnotherInner() bool {
	return p.AnotherInner != nil
}

func (p *TestStruct) IsSetOptNilList() bool {
	return p.OptNilList != nil
}

func (p *TestStruct) IsSetOptNilInsList() bool {
	return p.OptNilInsList != nil
}

func (p *TestStruct) IsSetOptStatus() bool {
	return p.OptStatus != nil
}

func (p *TestStruct) Read(iprot thrift.TProtocol) (err error) {
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLeft bool = false
	var issetRequiredIns bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLeft = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetRequiredIns = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = p._unknownFields.Append(iprot, name, fieldTypeId, fieldId); err != nil {
				goto UnknownFieldsAppendError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLeft {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRequiredIns {
		fieldId = 14
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TestStruct[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
UnknownFieldsAppendError:
	return thrift.PrependError(fmt.Sprintf("%T append unknown field(name:%s type:%d id:%d) error: ", p, name, fieldTypeId, fieldId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TestStruct[fieldId]))
}

func (p *TestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Left = v
	}
	return nil
}

func (p *TestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Right = v
	}
	return nil
}

func (p *TestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Dummy = []byte(v)
	}
	return nil
}

func (p *TestStruct) ReadField4(iprot thrift.TProtocol) error {
	p.InnerReq = NewInner()
	if err := p.InnerReq.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = HTTPStatus(v)
	}
	return nil
}

func (p *TestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Str = v
	}
	return nil
}

func (p *TestStruct) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.EnumList = make([]HTTPStatus, 0, size)
	for i := 0; i < size; i++ {
		var _elem HTTPStatus
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = HTTPStatus(v)
		}

		p.EnumList = append(p.EnumList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Strmap = make(map[int32]string, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Strmap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Int64 = v
	}
	return nil
}

func (p *TestStruct) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.IntList = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.IntList = append(p.IntList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LocalList = make([]*Local, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLocal()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.LocalList = append(p.LocalList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField12(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.StrLocalMap = make(map[string]*Local, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewLocal()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.StrLocalMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.NestList = make([][]int32, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]int32, 0, size)
		for i := 0; i < size; i++ {
			var _elem1 int32
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.NestList = append(p.NestList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField14(iprot thrift.TProtocol) error {
	p.RequiredIns = NewLocal()
	if err := p.RequiredIns.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField16(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.NestMap = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.NestMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.NestMap2 = make([]map[string]HTTPStatus, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_elem := make(map[string]HTTPStatus, size)
		for i := 0; i < size; i++ {
			var _key string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_key = v
			}

			var _val HTTPStatus
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_val = HTTPStatus(v)
			}

			_elem[_key] = _val
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.NestMap2 = append(p.NestMap2, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.EnumMap = make(map[int32]HTTPStatus, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val HTTPStatus
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = HTTPStatus(v)
		}

		p.EnumMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Strlist = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Strlist = append(p.Strlist, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField20(iprot thrift.TProtocol) error {
	p.OptionalIns = NewLocal()
	if err := p.OptionalIns.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField21(iprot thrift.TProtocol) error {
	p.AnotherInner = NewInner()
	if err := p.AnotherInner.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.OptNilList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.OptNilList = append(p.OptNilList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.NilList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.NilList = append(p.NilList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.OptNilInsList = make([]*Inner, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewInner()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.OptNilInsList = append(p.OptNilInsList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField25(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.NilInsList = make([]*Inner, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewInner()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.NilInsList = append(p.NilInsList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := HTTPStatus(v)
		p.OptStatus = &tmp
	}
	return nil
}

func (p *TestStruct) ReadField27(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.EnumKeyMap = make(map[HTTPStatus]*Local, size)
	for i := 0; i < size; i++ {
		var _key HTTPStatus
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = HTTPStatus(v)
		}
		_val := NewLocal()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.EnumKeyMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) ReadField28(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Complex = make(map[HTTPStatus][]map[string]*Local, size)
	for i := 0; i < size; i++ {
		var _key HTTPStatus
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = HTTPStatus(v)
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]map[string]*Local, 0, size)
		for i := 0; i < size; i++ {
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return err
			}
			_elem := make(map[string]*Local, size)
			for i := 0; i < size; i++ {
				var _key1 string
				if v, err := iprot.ReadString(); err != nil {
					return err
				} else {
					_key1 = v
				}
				_val1 := NewLocal()
				if err := _val1.Read(iprot); err != nil {
					return err
				}

				_elem[_key1] = _val1
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Complex[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestStruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}

		if err = p._unknownFields.Write(oprot); err != nil {
			goto UnknownFieldsWriteError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
UnknownFieldsWriteError:
	return thrift.PrependError(fmt.Sprintf("%T write unknown fields error: ", p), err)
}

func (p *TestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Left", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Left); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRight() {
		if err = oprot.WriteFieldBegin("Right", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Right); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Dummy", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Dummy)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InnerReq", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InnerReq.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Str", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Str); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enum_list", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.EnumList)); err != nil {
		return err
	}
	for _, v := range p.EnumList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrmap() {
		if err = oprot.WriteFieldBegin("Strmap", thrift.MAP, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Strmap)); err != nil {
			return err
		}
		for k, v := range p.Strmap {

			if err := oprot.WriteI32(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TestStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Int64", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Int64); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TestStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntList() {
		if err = oprot.WriteFieldBegin("IntList", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.IntList)); err != nil {
			return err
		}
		for _, v := range p.IntList {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TestStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("localList", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LocalList)); err != nil {
		return err
	}
	for _, v := range p.LocalList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TestStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StrLocalMap", thrift.MAP, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StrLocalMap)); err != nil {
		return err
	}
	for k, v := range p.StrLocalMap {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TestStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nestList", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.NestList)); err != nil {
		return err
	}
	for _, v := range p.NestList {
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TestStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("required_ins", thrift.STRUCT, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RequiredIns.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TestStruct) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nestMap", thrift.MAP, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.NestMap)); err != nil {
		return err
	}
	for k, v := range p.NestMap {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TestStruct) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nestMap2", thrift.LIST, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.NestMap2)); err != nil {
		return err
	}
	for _, v := range p.NestMap2 {
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteI32(int32(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TestStruct) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enum_map", thrift.MAP, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.EnumMap)); err != nil {
		return err
	}
	for k, v := range p.EnumMap {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteI32(int32(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TestStruct) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Strlist", thrift.LIST, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Strlist)); err != nil {
		return err
	}
	for _, v := range p.Strlist {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TestStruct) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptionalIns() {
		if err = oprot.WriteFieldBegin("optional_ins", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OptionalIns.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TestStruct) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AnotherInner", thrift.STRUCT, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AnotherInner.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TestStruct) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptNilList() {
		if err = oprot.WriteFieldBegin("opt_nil_list", thrift.LIST, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.OptNilList)); err != nil {
			return err
		}
		for _, v := range p.OptNilList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TestStruct) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nil_list", thrift.LIST, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.NilList)); err != nil {
		return err
	}
	for _, v := range p.NilList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TestStruct) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptNilInsList() {
		if err = oprot.WriteFieldBegin("opt_nil_ins_list", thrift.LIST, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OptNilInsList)); err != nil {
			return err
		}
		for _, v := range p.OptNilInsList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TestStruct) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nil_ins_list", thrift.LIST, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NilInsList)); err != nil {
		return err
	}
	for _, v := range p.NilInsList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TestStruct) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptStatus() {
		if err = oprot.WriteFieldBegin("opt_status", thrift.I32, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.OptStatus)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TestStruct) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enum_key_map", thrift.MAP, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.EnumKeyMap)); err != nil {
		return err
	}
	for k, v := range p.EnumKeyMap {

		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TestStruct) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("complex", thrift.MAP, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Complex)); err != nil {
		return err
	}
	for k, v := range p.Complex {

		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.MAP, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for k, v := range v {

				if err := oprot.WriteString(k); err != nil {
					return err
				}

				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestStruct(%+v)", *p)
}

func (p *TestStruct) DeepEqual(ano *TestStruct) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Left) {
		return false
	}
	if !p.Field2DeepEqual(ano.Right) {
		return false
	}
	if !p.Field3DeepEqual(ano.Dummy) {
		return false
	}
	if !p.Field4DeepEqual(ano.InnerReq) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.Str) {
		return false
	}
	if !p.Field7DeepEqual(ano.EnumList) {
		return false
	}
	if !p.Field8DeepEqual(ano.Strmap) {
		return false
	}
	if !p.Field9DeepEqual(ano.Int64) {
		return false
	}
	if !p.Field10DeepEqual(ano.IntList) {
		return false
	}
	if !p.Field11DeepEqual(ano.LocalList) {
		return false
	}
	if !p.Field12DeepEqual(ano.StrLocalMap) {
		return false
	}
	if !p.Field13DeepEqual(ano.NestList) {
		return false
	}
	if !p.Field14DeepEqual(ano.RequiredIns) {
		return false
	}
	if !p.Field16DeepEqual(ano.NestMap) {
		return false
	}
	if !p.Field17DeepEqual(ano.NestMap2) {
		return false
	}
	if !p.Field18DeepEqual(ano.EnumMap) {
		return false
	}
	if !p.Field19DeepEqual(ano.Strlist) {
		return false
	}
	if !p.Field20DeepEqual(ano.OptionalIns) {
		return false
	}
	if !p.Field21DeepEqual(ano.AnotherInner) {
		return false
	}
	if !p.Field22DeepEqual(ano.OptNilList) {
		return false
	}
	if !p.Field23DeepEqual(ano.NilList) {
		return false
	}
	if !p.Field24DeepEqual(ano.OptNilInsList) {
		return false
	}
	if !p.Field25DeepEqual(ano.NilInsList) {
		return false
	}
	if !p.Field26DeepEqual(ano.OptStatus) {
		return false
	}
	if !p.Field27DeepEqual(ano.EnumKeyMap) {
		return false
	}
	if !p.Field28DeepEqual(ano.Complex) {
		return false
	}
	return true
}

func (p *TestStruct) Field1DeepEqual(src int32) bool {

	if p.Left != src {
		return false
	}
	return true
}
func (p *TestStruct) Field2DeepEqual(src int32) bool {

	if p.Right != src {
		return false
	}
	return true
}
func (p *TestStruct) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.Dummy, src) != 0 {
		return false
	}
	return true
}
func (p *TestStruct) Field4DeepEqual(src *Inner) bool {

	if !p.InnerReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TestStruct) Field5DeepEqual(src HTTPStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *TestStruct) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Str, src) != 0 {
		return false
	}
	return true
}
func (p *TestStruct) Field7DeepEqual(src []HTTPStatus) bool {

	if len(p.EnumList) != len(src) {
		return false
	}
	for i, v := range p.EnumList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field8DeepEqual(src map[int32]string) bool {

	if len(p.Strmap) != len(src) {
		return false
	}
	for k, v := range p.Strmap {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field9DeepEqual(src int64) bool {

	if p.Int64 != src {
		return false
	}
	return true
}
func (p *TestStruct) Field10DeepEqual(src []int32) bool {

	if len(p.IntList) != len(src) {
		return false
	}
	for i, v := range p.IntList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field11DeepEqual(src []*Local) bool {

	if len(p.LocalList) != len(src) {
		return false
	}
	for i, v := range p.LocalList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field12DeepEqual(src map[string]*Local) bool {

	if len(p.StrLocalMap) != len(src) {
		return false
	}
	for k, v := range p.StrLocalMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field13DeepEqual(src [][]int32) bool {

	if len(p.NestList) != len(src) {
		return false
	}
	for i, v := range p.NestList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *TestStruct) Field14DeepEqual(src *Local) bool {

	if !p.RequiredIns.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TestStruct) Field16DeepEqual(src map[string][]string) bool {

	if len(p.NestMap) != len(src) {
		return false
	}
	for k, v := range p.NestMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *TestStruct) Field17DeepEqual(src []map[string]HTTPStatus) bool {

	if len(p.NestMap2) != len(src) {
		return false
	}
	for i, v := range p.NestMap2 {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *TestStruct) Field18DeepEqual(src map[int32]HTTPStatus) bool {

	if len(p.EnumMap) != len(src) {
		return false
	}
	for k, v := range p.EnumMap {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field19DeepEqual(src []string) bool {

	if len(p.Strlist) != len(src) {
		return false
	}
	for i, v := range p.Strlist {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field20DeepEqual(src *Local) bool {

	if !p.OptionalIns.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TestStruct) Field21DeepEqual(src *Inner) bool {

	if !p.AnotherInner.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TestStruct) Field22DeepEqual(src []string) bool {

	if len(p.OptNilList) != len(src) {
		return false
	}
	for i, v := range p.OptNilList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field23DeepEqual(src []string) bool {

	if len(p.NilList) != len(src) {
		return false
	}
	for i, v := range p.NilList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field24DeepEqual(src []*Inner) bool {

	if len(p.OptNilInsList) != len(src) {
		return false
	}
	for i, v := range p.OptNilInsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field25DeepEqual(src []*Inner) bool {

	if len(p.NilInsList) != len(src) {
		return false
	}
	for i, v := range p.NilInsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field26DeepEqual(src *HTTPStatus) bool {

	if p.OptStatus == src {
		return true
	} else if p.OptStatus == nil || src == nil {
		return false
	}
	if *p.OptStatus != *src {
		return false
	}
	return true
}
func (p *TestStruct) Field27DeepEqual(src map[HTTPStatus]*Local) bool {

	if len(p.EnumKeyMap) != len(src) {
		return false
	}
	for k, v := range p.EnumKeyMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TestStruct) Field28DeepEqual(src map[HTTPStatus][]map[string]*Local) bool {

	if len(p.Complex) != len(src) {
		return false
	}
	for k, v := range p.Complex {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if len(v) != len(_src1) {
				return false
			}
			for k, v := range v {
				_src2 := _src1[k]
				if !v.DeepEqual(_src2) {
					return false
				}
			}
		}
	}
	return true
}

type EmptyStruct struct {
	_unknownFields unknown.Fields
}

func NewEmptyStruct() *EmptyStruct {
	return &EmptyStruct{}
}

func (p *EmptyStruct) InitDefault() {
	*p = EmptyStruct{}
}

func (p *EmptyStruct) CarryingUnknownFields() bool {
	return len(p._unknownFields) > 0
}

var fieldIDToName_EmptyStruct = map[int16]string{}

func (p *EmptyStruct) Read(iprot thrift.TProtocol) (err error) {
	var name string
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		name, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		default:
			if err = p._unknownFields.Append(iprot, name, fieldTypeId, fieldId); err != nil {
				goto UnknownFieldsAppendError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
UnknownFieldsAppendError:
	return thrift.PrependError(fmt.Sprintf("%T append unknown field(name:%s type:%d id:%d) error: ", p, name, fieldTypeId, fieldId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmptyStruct) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("EmptyStruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

		if err = p._unknownFields.Write(oprot); err != nil {
			goto UnknownFieldsWriteError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
UnknownFieldsWriteError:
	return thrift.PrependError(fmt.Sprintf("%T write unknown fields error: ", p), err)
}

func (p *EmptyStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyStruct(%+v)", *p)
}

func (p *EmptyStruct) DeepEqual(ano *EmptyStruct) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}
